<?php

use Illuminate\Support\Facades\Cache;
use Illuminate\Support\Facades\Log;
use App\Exceptions\ErrCode;
use App\MyClass\Jwt;
use App\MyClass\WxPay;
use App\Models;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;
use Illuminate\Support\Facades\Redis;
use Illuminate\Support\Facades\File;

/**
 * 响应错误
 * @param int $status 状态码
 * @param string $message 错误消息
 * @param array $attache 附加消息
 */
function error(int $status = 1001, string $message = 'error', array $attache = [])
{
    header("Content-type:application/json;charset=utf-8");
    $res = json_encode(array('status' => $status, 'message' => $message, 'data' => (object)[], 'attache' => $attache, 'token' => session('token', '')), JSON_UNESCAPED_UNICODE);
    exit($res);
}
/**
 * 正常响应接口
 * @param array $data 接口返回数据
 * @param string $message 消息
 * @param array $attache 附加数据
 */
function success($data = [], string $message = 'ok', array $attache = [])
{
    header("Content-type:application/json;charset=utf-8");
    $res = json_encode(array('status' => 0, 'message' => $message, 'data' => $data, 'attache' => $attache, 'token' => session('token', '')), JSON_UNESCAPED_UNICODE);
    exit($res);
}
function errorCode()
{
    $error = new ErrCode();
    return $error;
}


/**
 * 获取公钥
 *
 * @param $publicKey 公钥字符串
 * @return resource
 */
function getPublicKey($publicKey)
{
    $keyResource = openssl_get_publickey($publicKey);
    return $keyResource;
}

/**
 * RSA加密
 *
 * @param $data 待加密数据
 * @param $publicKey 公钥
 * @return string
 */
function rsaEncrypt($data, $publicKey)
{
    $cipherText = '';
    $keySize = openssl_pkey_get_details($publicKey)['bits'];
    $maxLength = ($keySize / 8) - 11;
    $dataChunks = str_split($data, $maxLength);
    foreach ($dataChunks as $chunk) {
        $encrypted = '';
        $success = openssl_public_encrypt($chunk, $encrypted, $publicKey);
        if (!$success) {
            return '';
        }
        $cipherText .= $encrypted;
    }
    $encodedCipherText = base64_encode($cipherText);
    return $encodedCipherText;
}
/**
 * RSA解密
 *
 * @param string $data 待解密数据
 * @param string $privateKey 私钥
 * @return string
 */
function rsaDecrypt($data, $privateKey)
{
    $privateKey = openssl_pkey_get_private($privateKey);
    $dataBytes = base64_decode($data);
    $decryptedData = '';
    $len = strlen($dataBytes);
    $offset = 0;
    $i = 0;
    $maxDecryptBlock = 128;
    $cipher = '';
    while ($len - $offset > 0) {
        if ($len - $offset > $maxDecryptBlock) {
            $cache = substr($dataBytes, $offset, $maxDecryptBlock);
            openssl_private_decrypt($cache, $cipher, $privateKey);
        } else {
            $cache = substr($dataBytes, $offset);
            openssl_private_decrypt($cache, $cipher, $privateKey);
        }
        $decryptedData .= $cipher;
        $i++;
        $offset = $i * $maxDecryptBlock;
    }
    return $decryptedData;
}

function getSignatureContent($params)
{
    ksort($params);
    $content = '';
    $index = 0;
    foreach ($params as $key => $value) {
        if (!empty($value)) {
            $content .= ($index == 0 ? '' : '&') . $key . '=' . $value;
            $index++;
        }
    }
    return $content;
}

function encryptNumber($number)
{
    $encoded = base64_encode($number);
    $encoded = str_replace('=', '', $encoded);
    return $encoded;
}

function decryptNumber($encoded)
{
    $length = strlen($encoded) % 4;
    if ($length !== 0) {
        $encoded .= str_repeat('=', 4 - $length);
    }
    $decoded = base64_decode($encoded);
    return $decoded;
}
/**
 * 获取私钥
 *
 * @param string $privateKey 私钥字符串
 * @return resource
 */
function getPrivateKey($privateKey)
{
    $key = openssl_pkey_get_private($privateKey);
    if (!$key) {
        return '';
    }
    return $key;
}

/**
 * sha1WithRsa签名
 *
 * @param string $data 待签名数据
 * @param string $privateKey 私钥
 * @return string 签名
 */
function sha1Sign($data, $privateKey)
{
    $signature = openssl_get_privatekey($privateKey);
    openssl_sign($data, $signatureResult, $signature, OPENSSL_ALGO_SHA1);
    openssl_free_key($signature);
    return base64_encode($signatureResult);
}
//加密AES/CBC/NoPadding 
function AesOpensslEncrypt($json_data, $key, $iv)
{
    $biz_content = openssl_encrypt($json_data, 'aes-128-cbc', $key, OPENSSL_RAW_DATA, $iv);
    return rtrim(base64_encode($biz_content), "\0");
}
function AesOpensslDecrypt($json_data, $key, $iv)
{
    $biz_content = openssl_decrypt($json_data, 'aes-128-cbc', $key, OPENSSL_ZERO_PADDING, $iv);
    return $biz_content;
}

function encryptCBCNoPadding($secretKeyBytes, $intVectorBytes, $input)
{
    $ALGORITHM = "AES";
    $AES_CBC_NOPADDING = "AES/CBC/NoPadding";
    $iv = $intVectorBytes;
    $secretKey = $secretKeyBytes;
    $inputLength = strlen($input);
    $srcLength = '';

    $cipher = openssl_cipher_iv_length($ALGORITHM . '/' . $AES_CBC_NOPADDING);
    $blockSize = $cipher;
    $srcBytes = '';
    if (0 != $inputLength % $blockSize) {
        $srcLength = $inputLength + ($blockSize - $inputLength % $blockSize);
        $srcBytes = array_pad($input, $srcLength, 0);
    } else {
        $srcBytes = $input;
    }

    $encryptBytes = openssl_encrypt($srcBytes, $AES_CBC_NOPADDING, $secretKey, OPENSSL_RAW_DATA, $iv);
    return $encryptBytes;
}
//私钥加密
function encryptByPrivateKey($sign, $privateKey)
{
    try {
        $origiSignPublicKeyEncrypt = openssl_private_encrypt($sign, $encrypted, $privateKey);
        return rtrim(base64_encode($encrypted), "\0");
    } catch (\Exception $e) {
        return $e->getMessage();
    }
}
function getString($param)
{
    $paramStr = "";

    $paramSort = array();
    foreach ($param as $key => $value) {
        $paramSort[$key] = $value;
    }
    ksort($paramSort);

    foreach ($paramSort as $key => $value) {
        $paramStr .= "&" . $key . "=" . $value;
    }

    if (strlen($paramStr) > 0) {
        $paramStr = substr($paramStr, 1);
    }

    return $paramStr;
}
//共钥加密
function encryptByPublicKey($key, $publicKey)
{
    try {
        openssl_public_encrypt($key, $encrypted, $publicKey);
        return rtrim(base64_encode($encrypted), "\0");
    } catch (Exception $e) {
        return $e->getMessage();
    }
}
function ToUrlParams($values)
{
    $buff = "";
    foreach ($values as $k => $v) {
        if ($k != "sign" && $v != "" && !is_array($v)) {
            $buff .= $k . "=" . $v . "&";
        }
    }

    $buff = trim($buff, "&");
    return $buff;
}

function createKey()
{
    // 生成 2048 位的 RSA 密钥对
    $key = openssl_pkey_new(array(
        'private_key_bits' => 1024,
        'private_key_type' => OPENSSL_KEYTYPE_RSA,
    ));
    // 获取私钥
    openssl_pkey_export($key, $privateKey);
    // 获取公钥
    $sympublicKey = openssl_pkey_get_details($key)['key'];
    File::put(base_path('public/paipai.private.key.pem'), $privateKey);
    File::put(base_path('public/paipai.public.key.pem'), $sympublicKey);
}
//----------------------------------------缓存相关------------------------------------

/**
 * 清除全部缓存
 */
function clearAllCache()
{
    Cache::flush();
}
/**
 * 清除指定缓存或所有缓存
 */
function cacheDelete($key = '')
{
    if (!empty($key)) {
        Cache::forget($key);
    } else {
        Cache::flush();
    }
}

/**
 * 获取标识缓存
 */
function getUpdateSign($uid = 0, $role_id = 0)
{
    //自己已有的验证标识
    // Cache::remember('sign_arr' . $uid, getCacheTime(10), function () use ($role_id) {
    //     $model = new Role();
    //     $list  =  $model->signArrRole($role_id);
    //     return $list;
    // });
    // //拉取需要验证的接口
    // Cache::remember('menu_arr' . $uid, getCacheTime(10), function () {
    //     $menuModel = new Menu();
    //     return $menuModel->allNoFiltration();
    // });
}





//-----------------------------------------转换相关------------------------------------

/**
 * 转为整数
 * @param string|int $num
 * @return int
 */
function toNum($num): int
{
    if ($num > 0) {
        return sprintf("%.2f", $num * 100);
    } else {
        return 0;
    }
}


/**
 * 可读化数字
 * @param string|int $num
 * @return string
 */
function humanNum($num): string
{
    if ($num > 0) {
        return number_format($num / 100, 2, '.', '');
    } else {
        return 0;
    }
}

/**
 * 可读化数字
 * @param string|int $num
 * @return string
 */
function humanNumInt($num): string
{
    if ($num > 0) {
        return $num / 100;
    } else {
        return 0;
    }
}
// ------------------------------------------数组处理相关-----------------------------------

/**
 * 将对象里面的对象转成同级
 * @param array $data 要转化的数据
 * @param array $key  在没有数据的情况下默认的值
 */
function formArrayData($data, $key = false)
{
    if (!$data || $data == null || count($data) < 1) {
        return $data;
    }
    if ($data && is_array($data) && !isset($data[0])) {
        $list = array();
        foreach ($data as $k => $v) {
            if (is_array($v) && count($v) == count($v, 1) && $key && isset($key[$k])) {
                foreach ($v as $ks => $vs) {
                    if ($vs == null || $vs == NULL) {
                        $vs = '';
                    }
                    $list[$k . '_' . $ks] = $vs;
                }
            } else {
                if ($key && isset($key[$k])) {
                    foreach ($key[$k] as $ks => $vs) {
                        $list[$k . '_' . $ks] = $vs;
                    }
                } else {
                    $list[$k] = $v;
                }
            }
        }
    } else {
        if (count($data) > 0) {
            $list = array();
            foreach ($data as $k => $v) {
                $new_list = array();
                foreach ($v as $ks => $vs) {
                    if (is_array($vs) && count($vs) == count($vs, 1) && $key && isset($key[$ks])) {
                        foreach ($vs as $kss => $vss) {
                            if ($vss == null || $vss == NULL) {
                                $vss = '';
                            }
                            $new_list[$ks . '_' . $kss] = $vss;
                        }
                    } else {
                        if ($key && isset($key[$ks])) {
                            foreach ($key[$ks] as $kss => $vss) {
                                $new_list[$ks . '_' . $kss] = $vss;
                            }
                        } else {
                            $new_list[$ks] = $vs;
                        }
                    }
                }
                $list[$k] = $new_list;
            }
        }
    }

    return $list;
}
/**
 * 获取二维数组指定字段里面的最小值
 */
function minVal($data = [], $key = 'pid')
{
    $min_val = min(array_column($data, $key));
    return $min_val;
}

/**
 * 分支树显示无限分类
 * @param $arr 需要处理的数组
 * @param $key 相当于数组单元的id
 * @param $fkey 相当于数组单元的父类id
 * @param $num 从第几层查起，也就是要查层的父类id
 * @return $list 返回的数组
 */
function recursionTree($arr, $key, $fkey, $num): array
{
    $list = array();
    foreach ($arr as $val) {
        if ($val[$fkey] == $num) {
            $tmp = recursionTree($arr, $key, $fkey, $val[$key]);
            if ($tmp) {
                $val['children'] = $tmp;
            } else {
                $val['children'] = [];
            }
            $list[] = $val;
        }
    }
    return $list;
}
function dayDateTimeForm()
{
    return date('YmdHis', time());
}
/**
 * 取出无线分类id
 */
function allChildren($data, &$item)
{
    if (count($data) > 0) {
        foreach ($data as  $v) {
            if (count($v['all_children']) > 0) {
                array_push($item, $v['id']);
                allChildren($v['all_children'], $item);
            } else {
                array_push($item, $v['id']);
            }
        }
    }
}
/**
 * 上级名称拼接
 */
function nameChildren($list, $name = 'name', $all_pid = 'all_pid', $id = 'id', $str = '>', $exp = ','): array
{
    if ($list) {
        $name_arr = array_column($list, null, $id);
        foreach ($list as $k => $v) {
            $str_name = '';
            if (!empty($v[$all_pid]) && $v[$all_pid] != 0) {
                $arr = explode($exp, $v[$all_pid]);
                foreach ($arr as $ks => $vs) {
                    if (isset($name_arr[$vs])) {
                        $str_name .= $name_arr[$vs][$name] . $str;
                    }
                }
            }
            $list[$k][$name] =  $str_name . $v[$name];
        }
        return $list;
    } else {
        return array();
    }
}
/**
 * 二维数组根据某个字段排序
 * @param array $array 要排序的数组
 * @param string $keys   要排序的键字段
 * @param string $sort  排序类型  SORT_ASC     SORT_DESC
 * @return array 排序后的数组
 */
function arraySort($array, $keys, $sort = SORT_DESC): array
{
    $keysValue = [];
    foreach ($array as $k => $v) {
        $keysValue[$k] = $v[$keys];
    }
    array_multisort($keysValue, $sort, $array);
    return $array;
}

//--------------------------------------------验证相关-------------------------------------


/**
 * 回调结束模板
 * @param  $msg string
 */
function callbackView($msg = '')
{
    //返回结果防止微信重复或多次请求
    $str = '<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>';
    echo $str;
    die;
}
/**
 * @param string $phone 手机号
 * @return int 1中国移动，2中国联通 3中国电信 0未知
 */
function phoneCheck($phone = ''): int
{
    if (!empty($phone)) {
        $isChinaMobile = "/^134[0-8]\d{7}$|^(?:13[5-9]|147|15[0-27-9]|178|18[2-478])\d{8}$/"; //移动方面最新答复
        $isChinaUnion = "/^(?:13[0-2]|145|15[56]|176|18[56])\d{8}$/"; //向联通微博确认并未回复
        $isChinaTelcom = "/^(?:133|153|177|173|191|199|18[019])\d{8}$/"; //1349号段 电信方面没给出答复，视作不存在
        // $isOtherTelphone = "/^170([059])\\d{7}$/";//其他运营商
        if (preg_match($isChinaMobile, $phone)) {
            return 1; //1中国移动
        } else if (preg_match($isChinaUnion, $phone)) {
            return 2; //中国联通
        } else if (preg_match($isChinaTelcom, $phone)) {
            return 3; //中国电信
        }
    }
    return 0; //0未知
}

/**验证密码是否一致
 * $new_pwd 原密码
 * $up_pwd 新密码
 */
function verifyPwd($new_pwd = '', $up_pwd = '')
{
    $new_pwd =  getPwd($new_pwd);
    $up_pwd =  getPwd($up_pwd);
    if ($new_pwd == $up_pwd) {
        return true;
    } else {
        return false;
    }
}

function jwtEnCode($data = array(), $key = 'app.admin_key')
{
    $jwt = new Jwt(config($key));
    $data['iat'] =  time();
    $data['exp'] = getTimeAdd(isset($data['exp']) ? $data['exp'] : 1);
    $token = $jwt::getToken($data);
    return $token;
}
function jwtDeCode($token = '', $key = 'app.admin_key')
{
    $jwt = new Jwt(config($key));
    $viif = $jwt::verifyToken($token);
    if ($viif) {
        $viif['iat'] = date('Y-m-d H:i:s', $viif['iat']);
        $viif['exp'] = date('Y-m-d H:i:s', $viif['exp']);
        return $viif;
    } else {
        return array();
    }
}

function createFile($contents = '')
{
    $ip       = gethostbyname(gethostname());
    $contents = str_replace('{{ip}}', $ip, $contents);
    $fd       = fopen(base_path('.encode'), 'w+');
    fwrite($fd, $contents);
    fclose($fd);
}
function getCodeVerify()
{
    $is_file =  file_exists(base_path('.encode'));
    if (!$is_file) {
        createFile();
    }
    $list = file(base_path('.encode'));
    $data = array('message' => '', 'code' => '');
    foreach ($list as $k => $v) {
        if (!empty($v)) {
            $decode = explode(';', $v);
            if (isset($decode[1])) {
                foreach ($decode as $vs) {
                    $decodes = explode('=>', $vs);
                    if (isset($decodes[1])) {
                        $key =   str_replace(' ', '', $decodes[0]);
                        $value =   str_replace(' ', '', $decodes[1]);
                        $data[$key] = $value;
                    }
                }
            }
        }
    }
    return $data;
}

function codeAnalysis()
{
    $data = getCodeVerify();
    if (empty($data['code'])) {
        error(errorCode()::ALREADY_EXISTS_NO, decrypt(config('app.admin_message')));
    }
    $jwt = new Jwt(config('app.admin_key'));
    $viif = $jwt::verifyToken($data['code']);
    if (!$viif) {
        $err  = $jwt::verifyToken($data['message']);
        if ($err) {
            error(errorCode()::ALREADY_EXISTS_NO, $err['message']);
        } else {
            error(errorCode()::ALREADY_EXISTS_NO, decrypt(config('app.admin_message')));
        }
    } else {
        return $viif;
    }
}

/**验证是否存在  */
function verifyExists($model, $key = '', $where = 0)
{
    if (!is_array($where)) {
        $where = [$where];
    }
    if (empty($key) || $where == 0) {
        return false;
    }
    $res =  $model->whereIn($key, $where)->exists();
    if ($res) {
        error(errorCode()::DATA_YES, __('api.data_yes'));
    }
    return false;
}

/**
 * 权限验证
 */
function verifyPermissions($uid = 0, $role_id = 0, $route_name = ''): bool
{
    $menu_arr = Cache::get('menu_arr' . $uid, false);
    $sign_arr = Cache::get('sign_arr' . $uid, false);
    if ($sign_arr == ['*']) {
        return true;
    }

    if ($menu_arr && $sign_arr) {
        if (in_array($route_name, $menu_arr)) {
            if (in_array($route_name, $sign_arr)) {
                return true;
            } else {
                return false;
            }
        } else {
            return true;
        }
    } else {
        getUpdateSign($uid, $role_id);
        $menu_arr = Cache::get('menu_arr' . $uid, false);
        $sign_arr = Cache::get('sign_arr' . $uid, false);
        if ($sign_arr == ['*']) {
            return true;
        }
        if ($menu_arr && $sign_arr) {
            if (in_array($route_name, $menu_arr)) {
                if (in_array($route_name, $sign_arr)) {
                    return true;
                } else {
                    return false;
                }
            } else {
                return true;
            }
        } else {
            return false;
        }
    }
}

/**
 * 验证是否存在
 * @param $model object
 * @param $where array
 */
function verifyRepetition($model, $where, $str = '', $trashed = false, $message = false)
{
    $res =  $model->when($trashed, function ($query) {
        return $query->withTrashed();
    })->where($where)->exists();
    if ($res) {
        $message = empty($message) ? __('api.repetition_sign') : $message;
        error(errorCode()::SIGN_RES, $str ??  $message);
    }
}


/**
 * 密码验证
 */
function pwdVerify($pwd, $new_pwd): bool
{
    if ($pwd == $new_pwd) {
        return true;
    } else {
        return false;
    }
}
/**
 * 密码转换
 */
function pwdEncrypt($pwd): string
{
    $pwds = md5($pwd . 'chest');
    return $pwds;
}



//------------------------------------------------身份证相关处理------------------------------------
/*
* 根据身份证号码获取年龄
* inupt   $code = 完整的身份证号
* return  $age : 年龄 三位数 如023
*/
function ageVerification($code = '')
{
    $age_time = strtotime(substr($code, 6, 8));
    if ($age_time === false) {
        return false;
    }
    list($y1, $m1, $d1) = explode("-", date("Y-m-d", $age_time));

    $now_time = strtotime("now");

    list($y2, $m2, $d2) = explode("-", date("Y-m-d", $now_time));
    $age = $y2 - $y1;
    if ((int)($m2 . $d2) < (int)($m1 . $d1)) {
        $age -= 1;
    }
    return $age;
}
/**
 * 更据身份证获取性别1男2女
 */
function getSex($cid = ''): int
{
    //根据身份证号返回性别
    if (!checkIdCard($cid)) {
        return 0;
    }
    $sexint = (int) substr($cid, 16, 1);

    return 0 === $sexint % 2 ? 2 : 1;
}
/**
 * 根据身份证号，自动返回对应的星座
 */
function getXingZuo($cid = '')
{
    // 根据身份证号，自动返回对应的星座
    if (!checkIdCard($cid)) {
        return 0;
    }
    $bir = substr($cid, 10, 4);
    $month = (int) substr($bir, 0, 2);
    $day = (int) substr($bir, 2);
    $strValue = '';
    if ((1 == $month && $day <= 21) || (2 == $month && $day <= 19)) {
        $strValue = 0; //水瓶座
    } elseif ((2 == $month && $day > 20) || (3 == $month && $day <= 20)) {
        $strValue = 1; //双鱼座
    } elseif ((3 == $month && $day > 20) || (4 == $month && $day <= 20)) {
        $strValue = 2; //白羊座
    } elseif ((4 == $month && $day > 20) || (5 == $month && $day <= 21)) {
        $strValue = 3; //金牛座
    } elseif ((5 == $month && $day > 21) || (6 == $month && $day <= 21)) {
        $strValue = 4; //双子座
    } elseif ((6 == $month && $day > 21) || (7 == $month && $day <= 22)) {
        $strValue = 5; //巨蟹座
    } elseif ((7 == $month && $day > 22) || (8 == $month && $day <= 23)) {
        $strValue = 6; //狮子座
    } elseif ((8 == $month && $day > 23) || (9 == $month && $day <= 23)) {
        $strValue = 7; //处女座
    } elseif ((9 == $month && $day > 23) || (10 == $month && $day <= 23)) {
        $strValue = 8; //天秤座
    } elseif ((10 == $month && $day > 23) || (11 == $month && $day <= 22)) {
        $strValue = 9; //天蝎座
    } elseif ((11 == $month && $day > 22) || (12 == $month && $day <= 21)) {
        $strValue = 10; //射手座
    } elseif ((12 == $month && $day > 21) || (1 == $month && $day <= 20)) {
        $strValue = 11; //魔羯座
    }

    return $strValue;
}
/**
 * 根据身份证号返回对应的生肖
 */
function getShengXiao($cid = ''): int
{

    if (!checkIdCard($cid)) {
        return 0;
    }
    $start = 1901;
    $end = $end = (int) substr($cid, 6, 4);
    $x = ($start - $end) % 12;
    $value = '';
    if (1 == $x || -11 == $x) {
        $value = 0; //鼠
    }
    if (0 == $x) {
        $value = 1; //牛
    }
    if (11 == $x || -1 == $x) {
        $value = 2; //虎
    }
    if (10 == $x || -2 == $x) {
        $value = 3; //兔
    }
    if (9 == $x || -3 == $x) {
        $value = 4; //龙
    }
    if (8 == $x || -4 == $x) {
        $value = 5; //蛇
    }
    if (7 == $x || -5 == $x) {
        $value = 6; //马
    }
    if (6 == $x || -6 == $x) {
        $value = 7; //羊
    }
    if (5 == $x || -7 == $x) {
        $value = 8; //猴
    }
    if (4 == $x || -8 == $x) {
        $value = 9; //鸡
    }
    if (3 == $x || -9 == $x) {
        $value = 10; //狗
    }
    if (2 == $x || -10 == $x) {
        $value = 11; //猪
    }

    return $value;
}
/**
 * 身份证校验是否合法
 *
 * @param string $idcard 完整的身份证号
 */
function checkIdCard($idcard = '')
{
    // 只能是18位
    if (strlen($idcard) != 18) {
        return false;
    }
    // 取出本体码
    $idcard_base = substr($idcard, 0, 17);
    // 取出校验码
    $verify_code = substr($idcard, 17, 1);
    // 加权因子
    $factor = array(7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2);
    // 校验码对应值
    $verify_code_list = array('1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2');
    // 根据前17位计算校验码
    $total = 0;
    for ($i = 0; $i < 17; $i++) {
        $total += substr($idcard_base, $i, 1) * $factor[$i];
    }
    // 取模
    $mod = $total % 11;
    // 比较校验码
    if ($verify_code == $verify_code_list[$mod]) {
        // 如果年龄计算失败，则判断为 身份证号有误
        if (ageVerification($idcard)) {
            return true;
        }
    }
    return false;
}
//------------------------------------------------微信相关------------------------------------

/**
 * 微信公众号消息推送
 */
function wxMessage($info, $type = -1)
{
    $url = 'https://api.weixin.qq.com/cgi-bin/message/template/send?access_token=' . getAccessToken(1);
    switch ($type) {
        case 0:
            //下单成功通知
            $data = array(
                "touser" => (string)$info['openid'],
                "template_id" => "XXo7Jacr60FaURF8UH4FwLq9hQOinYb4hSQ1obeuYPs",
                "url" => "http://niunai.pychunge.cn/payorder.html",
                "data" => array(
                    "first" => array(
                        "value" => "尊敬的【" . $info['name'] . "】你已下单成功,将根据投递日期时间开始配送",
                        "color" => "#173177"
                    ),
                    "keyword1" => array(
                        "value" => "伊奶配牛奶",
                        "color" => "#173177"
                    ),
                    "keyword2" => array(
                        "value" => $info['number'] . "KG",
                        "color" => "#173177"
                    ),
                    "keyword3" => array(
                        "value" => (string) $info['date_time'],
                        "color" => "#173177"
                    ),
                    "keyword4" => array(
                        "value" => dayDateTime(),
                        "color" => "#173177"
                    ),
                    "remark" => array(
                        "value" => "感谢你的使用,点击我查看配送计划。如有疑问，请联系客服:147-9992-2633",
                        "color" => "#173177"
                    ),
                ),
            );
            break;
        case 1:
            //送达通知
            $data = array(
                "touser" => $info['openid'],
                "template_id" => "VjjW-bw-4Qf6xGX9xY7Y-XXSRFI-hc2DMmwN3rmnsuo",
                "url" => "http://niunai.pychunge.cn/payorder.html",
                "data" => array(
                    "first" => array(
                        "value" => "尊敬的【" . $info['name'] . "】您预定的牛奶已送达,请尽快前来领取",
                        "color" => "#173177"
                    ),
                    "keyword1" => array(
                        "value" => "伊奶配牛奶",
                        "color" => "#173177"
                    ),
                    "keyword2" => array(
                        "value" => $info['number'] . "KG",
                        "color" => "#173177"
                    ),
                    "keyword3" => array(
                        "value" => $info['address'],
                        "color" => "#173177"
                    ),
                    "keyword4" => array(
                        "value" => dayDateTime(),
                        "color" => "#173177"
                    ),
                    "keyword5" => array(
                        "value" => $info['staff_name'],
                        "color" => "#173177"
                    ),
                    "remark" => array(
                        "value" => "感谢您的关注,祝您生活愉快。如有疑问,咨询电话:147-9992-2633",
                        "color" => "#173177"
                    ),
                ),
            );
            break;
        case 2:
            //送达通知
            $data = array(
                "touser" => $info['openid'],
                "template_id" => "uheSGIpmBr-diGUzU-y-gh4_wnD_RIrQoR4f6-v1jzg",
                "url" => "http://niunai.pychunge.cn/payorder.html",
                "data" => array(
                    "first" => array(
                        "value" => "牛奶订购提醒！",
                        "color" => "#173177"
                    ),
                    "keyword1" => array(
                        "value" => '无',
                        "color" => "#173177"
                    ),
                    "keyword2" => array(
                        "value" => "当日北京时间(10)点前下单当天送达\n超过早上10点明日送达",
                        "color" => "#173177"
                    ),
                    "remark" => array(
                        "value" => "感谢您的关注,祝您生活愉快。如有疑问\n咨询电话:147-9992-2633\n点击下方查看详情订购牛奶",
                        "color" => "#173177"
                    ),
                ),
            );
            break;
        default:
            return false;
    }
    $res = http($url, $data);
    return $res;
}
function getWxConfig($url)
{
    $pay = new WxPay();
    return $pay->getWxPayConfig($url);
}


/**
 * 解密微信手机号  返回手机号
 * @param string $appid  appid
 * @param  string  $session_key
 * @param  string $encryptedData
 * @param  string $iv
 * */
function getWxTel($appid, $session_key, $encryptedData, $iv)
{
    if (strlen($session_key) != 24) {
        error(errorCode()::ERROR, 'encodingAesKey 非法');
    }
    $aesKey = base64_decode($session_key);
    if (strlen($iv) != 24) {
        error(errorCode()::ERROR, 'IV错误');
    }
    $aesIV = base64_decode($iv);
    $aesCipher = base64_decode($encryptedData);
    $result = openssl_decrypt($aesCipher, "AES-128-CBC", $aesKey, 1, $aesIV);

    $dataObj = json_decode($result);
    if ($dataObj  == NULL) {
        error(errorCode()::ERROR, 'aes 解密失败');
    }
    if ($dataObj->watermark->appid != $appid) {
        error(errorCode()::ERROR, 'aes 解密失败');
    }
    $data = $result;
    $tel = json_decode($data, true);
    return $tel;
}
/**
 * 小程序永久二维码带参数
 */
function createQRCode($scene = 'uuid=0', $check_path = true, $page = 'pages/index/index', $width = 430, $autoColor = false, $lineColor = [], $isHyaline = false)
{
    $url = 'https://api.weixin.qq.com/wxa/getwxacodeunlimit?access_token=' . getAccessToken();
    $lineColor = $lineColor ?? ["r" => "0", "g" => "0", "b" => "0"]; //设置颜色
    $params = [
        'scene' => $scene,
        'page' => $page,
        'width' => intval($width),
        'auto_color' => $autoColor,
        'is_hyaline' => $isHyaline,
        'check_path' => $check_path
    ];

    $result = http($url, json_encode($params));
    // 判断是否是 json格式， 如果请求失败，会返回 JSON 格式的数据。
    if (is_null(json_decode($result))) {
        /**
         * 不是json格式的数据   说明有数据流  json_decode($result)返回值是为 null
         * 这里返回的图片 Buffer
         */
        return ['errcode' => 0, 'data' => $result, 'errmsg' => 'ok'];
    } else {
        $res = json_decode($result, true);
        $res['data'] = '';
        return $res;
    }
}


/**
 * @param string $path 文件夹地址
 * @param string $file_name 二维码图片名称
 * @param string $new_file_name 合成后保存的地址
 * @param int $new_width 
 */
function newImgQrCode($path, $file_name, $new_file_name, $new_width = 1125, $new_height = 2001)
{
    $haibao =  base_path('public/icon/haibao.png');
    $new_img_path = $path . $new_file_name;
    resize_image($haibao, $new_img_path, $new_width, $new_height);
    $QR = $path . $file_name;      //已经生成的原始二维码图
    $logo = $new_img_path; //生成的模版图
    if (file_exists($logo)) {
        $QR = imagecreatefromstring(file_get_contents($QR));    //目标图象连接资源。
        $logo = imagecreatefromstring(file_get_contents($logo));  //源图象连接资源。
        $QR_width = imagesx($QR);      //二维码图片宽度
        $QR_height = imagesy($QR);     //二维码图片高度
        $logo_width = imagesx($logo);    //logo图片宽度
        $logo_height = imagesy($logo);   //logo图片高度
        $logo_width = ($logo_width - $QR_width) + 100;
        $logo_height = ($logo_height - $QR_height) + 100;
        //重新组合图片并调整大小
        /*
         * imagecopyresampled() 将一幅图像(源图象)中的一块正方形区域拷贝到另一个图像中
         * 520 1175
         */
        imagecopyresampled($logo, $QR, $logo_width, $logo_height, 0, 0, 250, 250, $QR_height, $QR_width);
        //输出图片
        imagepng($logo, $new_img_path);
        imagedestroy($logo);
        imagedestroy($QR);
        //            echo '<img src="./img/qr_code.png" alt="使用微信扫描支付">';die();

        return true;
    } else {
        return false;
    }
}
/**
 * 改变图片的宽高
 *
 * @param string $img_src 原图片的存放地址或url
 * @param string $new_img_path 新图片的存放地址
 * @param int $new_width 新图片的宽度
 * @param int $new_height 新图片的高度
 * @return bool  成功true, 失败false
 * @author flynetcn (2009-12-16)
 *

 */

function resize_image($img_src, $new_img_path, $new_width, $new_height)
{

    $img_info = @getimagesize($img_src);
    if (!$img_info || $new_width < 1 || $new_height < 1 || empty($new_img_path)) {
        return false;
    }
    if (strpos($img_info['mime'], 'jpeg') !== false) {
        $pic_obj = imagecreatefromjpeg($img_src);
    } else if (strpos($img_info['mime'], 'gif') !== false) {
        $pic_obj = imagecreatefromgif($img_src);
    } else if (strpos($img_info['mime'], 'png') !== false) {
        $pic_obj = imagecreatefrompng($img_src);
    } else {
        return false;
    }
    $pic_width = imagesx($pic_obj);
    $pic_height = imagesy($pic_obj);
    if (function_exists("imagecopyresampled")) {
        $new_img = imagecreatetruecolor($new_width, $new_height);
        imagecopyresampled($new_img, $pic_obj, 0, 0, 0, 0, $new_width, $new_height, $pic_width, $pic_height);
    } else {
        $new_img = imagecreate($new_width, $new_height);
        imagecopyresized($new_img, $pic_obj, 0, 0, 0, 0, $new_width, $new_height, $pic_width, $pic_height);
    }
    if (preg_match('~.([^.]+)$~', $new_img_path, $match)) {
        $new_type = strtolower($match[1]);
        switch ($new_type) {
            case 'jpg':
                imagejpeg($new_img, $new_img_path);
                break;
            case 'gif':
                imagegif($new_img, $new_img_path);
                break;
            case 'png':
                imagepng($new_img, $new_img_path);
                break;
            default:
                imagejpeg($new_img, $new_img_path);
        }
    } else {
        imagejpeg($new_img, $new_img_path);
    }
    imagedestroy($pic_obj);
    imagedestroy($new_img);
    return true;
}
/**
 * @param int $type  0小程序 1公众号
 */
function getAccessToken($type = 0)
{

    if ($type == 1) {
        $accessTokenObject = json_decode(file_get_contents('https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=' . config('wx.gzh_AppId') . '&secret=' . config('wx.gzh_AppSecret')));
    } else {
        $accessTokenObject = json_decode(file_get_contents('https://api.weixin.qq.com/cgi-bin/token?grant_type=client_credential&appid=' . config('wx.AppID') . '&secret=' . config('wx.AppSecret')));
    }
    if (!isset($accessTokenObject->access_token)) {
        success($accessTokenObject);
        error(errorCode()::GET_WX_ACCESS_TOKEN_NO, __('api.get_wx_access_token_no'));
    }
    $access_token = $accessTokenObject->access_token;
    return $access_token;
}




//------------------------------------------------其他------------------------------------

function getEthnic($key = -1)
{
    $arr = array('汉族', '壮族', '满族', '回族', '维吾尔族', '苗族', '土家族', '哈尼族', '哈萨克族', '其他');
    if ($key > -1) {
        if (isset($arr[$key])) {
            return $arr[$key];
        } else {
            return $arr[9];
        }
    } else {
        return $arr;
    }
}
function getEducation($key = -1)
{
    $arr = array('小学', '初中', '中专', '高中', '大专', '本科', '硕士', '博士+');

    if ($key > -1) {
        if (isset($arr[$key])) {
            return $arr[$key];
        } else {
            return $arr[0];
        }
    } else {
        return $arr;
    }
}
function getEarnings($key = -1)
{
    $arr = array('2000元以下', '2000元~3000元', '3000元~5000元', '5000元~8000元', '8000元~10000元', '10000+');
    if ($key > -1) {
        if (isset($arr[$key])) {
            return $arr[$key];
        } else {
            return $arr[0];
        }
    } else {
        return $arr;
    }
}


/**
 * 加密解密
 * @param string $string 需要加密解密的字符串
 * @param bool $operation 密匙
 * @param string $operation true 加密 false解密
 * @return string  
 */
function encryptStr($string,  $key = '', $operation = false)
{
    $key = md5($key);
    $key_length = strlen($key);
    $string = $operation  ? base64_decode($string) : substr(md5($string . $key), 0, 8) . $string;
    $string_length = strlen($string);
    $rndkey = $box = array();
    $result = '';
    for ($i = 0; $i <= 255; $i++) {
        $rndkey[$i] = ord($key[$i % $key_length]);
        $box[$i] = $i;
    }
    for ($j = $i = 0; $i < 256; $i++) {
        $j = ($j + $box[$i] + $rndkey[$i]) % 256;
        $tmp = $box[$i];
        $box[$i] = $box[$j];
        $box[$j] = $tmp;
    }
    for ($a = $j = $i = 0; $i < $string_length; $i++) {
        $a = ($a + 1) % 256;
        $j = ($j + $box[$a]) % 256;
        $tmp = $box[$a];
        $box[$a] = $box[$j];
        $box[$j] = $tmp;
        $result .= chr(ord($string[$i]) ^ ($box[($box[$a] + $box[$j]) % 256]));
    }
    if ($operation) {
        if (substr($result, 0, 8) == substr(md5(substr($result, 8) . $key), 0, 8)) {
            return substr($result, 8);
        } else {
            return '';
        }
    } else {
        return str_replace('=', '', base64_encode($result));
    }
}
//驼峰命名转下划线命名
function toUnderScore($str)
{
    $dstr = preg_replace_callback('/([A-Z]+)/', function ($matchs) {
        return '_' . strtolower($matchs[0]);
    }, $str);
    return trim(preg_replace('/_{2,}/', '_', $dstr), '_');
}
function logImg($key = 0)
{
    $value = [' 🍑 ', '୧⍤⃝', '⍤', '୧', ' 🍄 ', ' 🥕 '];
    if (!isset($value[$key])) return '';
    return $value[$key];
}
function logMyImg()
{
    return '⍤ ୧⍤⃝ ⍤';
}
/**
 * sql导入过滤
 */
function sqlFiltration($v)
{
    $res = false;
    if (strstr($v, 'SET FOREIGN_KEY_CHECKS')) {
        $res = true;
    }
    if (strstr($v, '/*')) {
        $res = true;
    }
    if (strstr($v, 'DROP TABLE IF EXISTS')) {
        $res = true;
    }
    if (strstr($v, 'SET NAMES')) {
        $res = true;
    }
    if (strstr($v, 'CREATE TABLE')) {
        $res = true;
    }
    return $res;
}



function getCurl($url, $header = [])
{

    if (count($header) < 1) {
        $header = array(
            'Accept:application/json'
        );
    }
    $curl = curl_init();
    //设置抓取的url
    curl_setopt($curl, CURLOPT_URL, $url);
    //设置头文件的信息作为数据流输出
    curl_setopt($curl, CURLOPT_HEADER, 0);
    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 360);
    // 超时设置,以秒为单位
    curl_setopt($curl, CURLOPT_TIMEOUT, 360);
    // 超时设置，以毫秒为单位
    // curl_setopt($curl, CURLOPT_TIMEOUT_MS, 500);

    // 设置请求头
    curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    //设置获取的信息以文件流的形式返回，而不是直接输出。
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
    //执行命令
    $data = curl_exec($curl);

    // 显示错误信息
    $err = curl_error($curl);
    if ($err) {
        return [$err];
    } else {
        // 打印返回的内容
        curl_close($curl);
        if (!empty($data) && $data) {
            $is_ex =   xml_parser($data);
            if (!$is_ex) {
                $data = json_decode($data, true);
            } else {
                $data = $is_ex;
            }
        } else {
            return [];
        }
        return $data;
    }
}
//自定义xml验证函数xml_parser()
function xml_parser($str)
{
    $xml_parser = xml_parser_create();
    if (!xml_parse($xml_parser, $str, true)) {
        xml_parser_free($xml_parser);
        return false;
    } else {
        libxml_disable_entity_loader(true);
        $data = json_decode(json_encode(simplexml_load_string($str, 'SimpleXMLElement', LIBXML_NOCDATA), 320), true);
        return $data;
    }
}
function request_http($url, $data = null)
{
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $url);
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
    if (!empty($data)) {
        curl_setopt($curl, CURLOPT_POST, true);
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
    }
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    $res = curl_exec($curl);
    curl_close($curl);
    return $res;
}
/**
 * @param string $url 请求地址
 * @param array $data 请求参数 
 * @param array $header 设置头部参数
 * @param bool $json  是否已json格式发送post请求
 * @return string 返回json字符串
 */

function http($url, $data = [], $header = [], $json = true): string
{
    set_time_limit(0);
    $curl = curl_init();
    curl_setopt($curl, CURLOPT_URL, $url);
    if (!empty($header)) {
        curl_setopt($curl, CURLOPT_HTTPHEADER, $header);
    }
    curl_setopt($curl, CURLOPT_SSL_VERIFYPEER, false);
    curl_setopt($curl, CURLOPT_SSL_VERIFYHOST, false);
    curl_setopt($curl, CURLOPT_CONNECTTIMEOUT, 120);
    curl_setopt($curl, CURLOPT_POST, true);
    if (!empty($data)) {
        if ($json && is_array($data)) {
            $data = json_encode($data);
        }
        curl_setopt($curl, CURLOPT_POSTFIELDS, $data);
        if ($json) { //发送JSON数据
            curl_setopt($curl, CURLOPT_HEADER, 0);
            curl_setopt(
                $curl,
                CURLOPT_HTTPHEADER,
                array(
                    'Content-Type: application/json; charset=utf-8',
                    'Content-Length:' . strlen($data)
                )
            );
        }
    }
    curl_setopt($curl, CURLOPT_RETURNTRANSFER, 1);
    $res = curl_exec($curl);
    $errorno = curl_errno($curl);
    if ($errorno) {
        return false;
    }
    curl_close($curl);
    return $res;
}

function fromXml($xml)
{
    if (empty($xml)) {
        return '';
    }
    // 禁止引用外部xml实体
    libxml_disable_entity_loader(true);
    $data = json_decode(json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA), 320), true);
    return $data;
}
function getNumber($model, $merchant_id = 0, $key = 'number', $i = 10000)
{
    $number  = $model->when($merchant_id > 0, function ($query) use ($merchant_id) {
        return $query->where('merchant_id', $merchant_id);
    })->max($key);
    if ($number) {
        $number++;
        return $number;
    } else {
        return $i;
    }
}

function getPwd($pwd = '888888')
{
    return md5(base64_encode($pwd));
}

function db_fix()
{
    $str = config('app.db_fix') ?? '';
    return $str;
}


/**
 * 调试
 */
function debugMessage($info = [], $msg = '调试数据')
{
    Log::debug($msg, ['info' => $info]);
}

function unicodeDecode($unicode_str)
{
    $ison = '{"str":"' . $unicode_str . '"}';
    $arr = json_decode($ison, true);
    if (empty($arr)) return '';
    return $arr['str'];
}
/**
 * 获取路由名称
 */
function routeName($name = '', $key = 'admin.v1.')
{
    $route_name = str_replace($key, "", $name);
    return $route_name;
}
/**
 * 曲线结构
 * series字段生成
 */
function curveStructure($title = [], $list = []): array
{
    if (count($title) < 1 || count($list) < 1) {
        return array();
    }
    $series = array();
    foreach ($title as $k => $v) {
        $data = array();
        if (isset($list[$v['key']]) && count($list[$v['key']]) > 0) {
            $kes = array_values($list[$v['key']]);
            foreach ($kes as  $ks => $vs) {
                $data[] = $vs;
            }
        }
        $res = array('name' => $v['name'], 'data' => $data);
        if (isset($v['type']) && !empty($v['type'])) {
            $res['type'] = $v['type'];
        }
        $series[$k] = $res;
    }
    return $series;
}

/**
 * 圆形图和柱状图
 *
 */

function rawArtworkArr($key = [], $value = []): array
{
    if (count($key) > 0 && count($value) > 0) {
        $data = array();
        foreach ($key as $k => $v) {
            foreach ($value as $ks => $vs) {
                if (isset($vs[$k])) {
                    $data[$k][$ks] = $vs[$k];
                } else {
                    $data[$k][$ks] = 0;
                }
            }
        }
        return $data;
    } else {
        return [];
    }
}

function generateCode($id,$length = 4)
{
    $chars = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $code = '';
    $base = 62; // 总共62个字符可用
    while ($id > 0) {
        $remainder = $id % $base;
        $code = $chars[$remainder] . $code;
        $id = floor($id / $base);
    }

    $paddedCode = str_pad($code, $length, '0', STR_PAD_LEFT);
    if (strlen($paddedCode) > $length) {
        $paddedCode = substr($paddedCode, -$length); // 从末尾截取指定长度
    }

    return $paddedCode;
}


//-----------------------------------------------------时间相关---------------------------------------------

// 获取13位毫秒级时间戳
function getMillisecond()
{
    list($t1, $t2) = explode(' ', microtime());
    $microtime = (float)sprintf('%.0f', (floatval($t1) + floatval($t2)) * 1000);
    $microtime = explode('.', $microtime);
    return $microtime[0];
}

function dayTime()
{
    $times = date('H:i:s', time());
    return $times;
}
function dayDateTime()
{
    $times = date('Y-m-d H:i:s', time());
    return $times;
}
function dayDate()
{
    $times = date('Y-m-d', time());
    return $times;
}
/**
 * 指定日期加N月 默认当前时间加0
 * @param $date_time string Y-m-d
 * @param $number int 1
 */
function addMonth($date_time = '', $number = 0)
{
    return date('Y-m-d', strtotime($date_time . "+$number month"));
}
/**
 * 指定日期加N天 默认当前时间加0
 * @param $date_time string Y-m-d
 * @param $number int 1
 */
function addDayDate($date_time = '', $number = 0)
{
    return date('Y-m-d', strtotime($date_time . "+$number day"));
}
/**
 * 指定日期减N天 默认当前时间加0
 * @param $date_time string Y-m-d
 * @param $number int 1
 */
function subtractDayDate($number = 0, $date_time = '')
{
    return date('Y-m-d', strtotime($date_time . "-$number day"));
}
//获取指定时间是星期几
function getWeek($date)
{
    //强制转换日期格式
    $date_str = date('Y-m-d', strtotime($date));
    //封装成数组
    $arr = explode("-", $date_str);
    //参数赋值
    //年
    $year = $arr[0];
    //月，输出2位整型，不够2位右对齐
    $month = sprintf('%02d', $arr[1]);
    //日，输出2位整型，不够2位右对齐
    $day = sprintf('%02d', $arr[2]);
    //时分秒默认赋值为0；
    $hour = $minute = $second = 0;
    //转换成时间戳
    $strap = mktime($hour, $minute, $second, $month, $day, $year);
    //获取数字型星期几
    $number_wk = date("w", $strap);
    //自定义星期数组
    // $weekArr = array("星期日", "星期一", "星期二", "星期三", "星期四", "星期五", "星期六");
    //获取数字对应的星期
    // return $weekArr[$number_wk];
    return $number_wk;
}
/** 计算开始时间到结束时间之间间隔多少小时 */
function hoursDifference($date1, $date2)
{
    $timestamp1 = strtotime($date1);
    $timestamp2 = strtotime($date2);

    $diffInSeconds = $timestamp2 - $timestamp1;

    return (int)($diffInSeconds / 3600);  // 返回整数小时数
}
/** 小时减去后生成秒 */

function differenceInSeconds($hour1, $hour2)
{
    $hour1InSeconds = $hour1 * 60 * 60;
    $hour2InSeconds = $hour2 * 60 * 60;

    return round($hour1InSeconds - $hour2InSeconds);
}
/**
 * 计算开始时间到结束时间之间的分钟数
 */
function getBeginEndTime($begin_time = '', $end_time = ''): float
{
    $v_begin = strtotime($begin_time);
    $v_end = strtotime($end_time);
    $remain  = ($v_end - $v_begin) / 60;
    return $remain;
}

/**
 * 当时间搓加N小时
 */
function getTimeAdd($n = 1)
{
    $times = time() + ((float)$n * 3600);
    return $times;
}


//缓存时间
function getCacheTime($v = 1): int
{
    return 60 * 60 * $v;
}

/**
 * 计算开始时间到结束时间的间隔天数
 *
 * @param string $begin_time
 * @param string $end_time
 * @return void
 */
function getDateDay($begin_time = '', $end_time = ''): int
{
    $start_time = strtotime($begin_time);
    $end_time = strtotime($end_time);
    $count_days = (($end_time - $start_time) / 60 / 60 / 24);
    return (int)$count_days;
}
/**
 * 计算开始时间到结束时间的间隔天数
 * float
 * @param string $begin_time
 * @param string $end_time
 * @return void
 */
function getDateDayTime($begin_time = '', $end_time = ''): int
{
    $start_time = strtotime($begin_time . ' 00:00:01');
    $end_time = strtotime($end_time . ' 23:59:59');
    $count_days = (($end_time - $start_time) / 60 / 60 / 24);
    return round($count_days, 0);
}
/**
 * 获取指定月份最后一天日期 格式(2021-01-04)
 */
function getthemonth($date)
{
    $firstday = date('Y-m-01', strtotime($date));
    $lastday = date('Y-m-d', strtotime("$firstday +1 month -1 day"));
    return $lastday;
}
/**
 * 获取指定时间加N天后的所有日期
 */
function getAddDateTime($begin_time, $number = 1)
{
    $end_time  = date('Y-m-d', strtotime($begin_time) + (86400 * $number) - 86400);
    return getDateFromRange($begin_time, $end_time);
}
/**
 * 获取开始日期到结束日期内的所有日期
 *
 * @param [type] $startdate
 * @param [type] $enddate
 * @return array
 */
function getDateFromRange(string $startdate, string $enddate, $desc = 'asc'): array
{
    $stimestamp = strtotime($startdate);
    $etimestamp = strtotime($enddate);

    // 计算日期段内有多少天
    $days = ($etimestamp - $stimestamp) / 86400 + 1;

    // 保存每天日期
    $date = array();

    for ($i = 0; $i < $days; $i++) {
        $date[] = date('Y-m-d', $stimestamp + (86400 * $i));
    }
    if ($desc == 'desc') {
        rsort($data);
    } else {
        sort($date);
    }
    return $date;
}

/**
 * 格式化导入的时间搓
 */
function fromttingDate($time)
{
    if (is_int($time) || is_float($time)) {
        return ($time - 25569) * 24 * 3600;
    } else {
        return strtotime($time);
    }
}
/**
 * 获取当天时段
 */
function getFourTime($k = 1, $v = -1): array
{
    $data = array();
    for ($i = 0; $i <= 24; $i++) {
        if ($i % $k == 0 && $i != $v) {
            if ($i < 10) {
                $data[] = '0' . $i;
            } else {
                $data[] = $i;
            }
        }
    }
    return $data;
}
/**
 * 获取指定日期的周一 日期
 * @param $monday string 2021-07-21
 */
function getWeekMonday($monday)
{
    $monday  = strtotime($monday);
    $times = date('Y-m-d', ($monday - ((date('w', $monday) == 0 ? 7 : date('w', $monday)) - 1) * 24 * 3600));
    return $times;
}
/**
 * 获取指定日期的周日 日期
 * @param $monday string 2021-07-21
 */

function getWeekEnd($monday)
{
    $monday = strtotime($monday);
    //0 6 5 4 3 2 1 
    $day = date('w', $monday);
    if ($day == 0) {
        $time  =  date('Y-m-d', $monday);
    } elseif ($day == 6) {
        $time = date('Y-m-d', $monday + (24 * 3600));
    } else {
        $time = date('Y-m-d', $monday + ((7 - $day) * 24 * 3600));
    }
    return $time;
}

//-----------------------------------------------sql语句相关------------------------------------------
/**
 * 生成批量更新sql语句 更新多个字段细分为不同值
 * @param array $key 需要修改的字段
 * @param array $param 修改的数据(2维数组)
 * @param int $x 数据库表下标
 * @param string $id 需要指定修改的条件字段默认id主键
 * @return string
 */
function updateAll($key = [], $param = [], $table = '', $id = 'id', $x = 0)
{
    $where_in_ids = implode(',', array_map(function ($v) use ($id) {
        return $v[$id];
    }, $param));

    $sql = 'UPDATE `' . $table . '` SET';
    $i = 0;
    foreach ($key as $k => $v) {
        $i++;
        if ($i == 1) {
            $sql .= " `$v` = CASE $id ";
            $str = '';
        } else {
            $sql .= " END, `$v` = CASE $id ";
            $str = '';
        }
        foreach ($param as $ky => $vo) {
            if (isset($vo[$id]) && $vo[$v]) {
                $str .= " WHEN $vo[$id] THEN '$vo[$v]' ";
            } else {
                $str .= " WHEN $vo[$id] THEN 0 ";
            }
        }
        $sql .= $str;
    }
    $sql .= " END WHERE `$id` IN ($where_in_ids) ";
    return $sql;
}

//----------------------------------------------------------随机方法---------------------------------------------------
//获取随机字符串
function randomStr($len = 6)
{
    $arr = array('q', 'w', 'e', 'r', 't', 'y', 'u', 'i', 'o', 'p', 'a', 'z', 'x', 'c', 'v', 'b', 'n', 'm', 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 'Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', 'A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', 'Z', 'X', 'C', 'V', 'B', 'N', 'M');
    $str = '';
    for ($i = 1; $i <= $len; $i++) {
        $key = rand(0, 53);
        $str .= $arr[$key];
    }
    return $str;
}
/**
 * 随机6位数int
 */
function getUniqueIntCode($model, $key = 'machine_code', $str = '', $i = 0)
{
    if ($i > 6) {
        return  rand(100000, 999999);
    }
    $i++;
    if (!empty($str)) {
        $res =  $model->where($key, $str)->exists();
        if (!$res) {
            return $str;
        } else {
            return getUniqueIntCode($model, $key, $str, $i);
        }
    } else {
        $str_rand = rand(100000, 999999);
        return getUniqueIntCode($model, $key, $str_rand, $i);
    }
}
/**
 * 随机字符串
 */
function getUniqueStrCode($model, $key = 'machine_code', $len = 6, $str = '', $i = 0)
{
    if ($i > 6) {
        return '';
    }
    $i++;
    if (!empty($str)) {
        $res =  $model->where($key, $str)->exists();
        if (!$res) {
            return $str;
        } else {
            return getUniqueStrCode($model, $key, $len, $str, $i);
        }
    } else {
        $str = randomStr($len);
        return getUniqueStrCode($model, $key, $len, $str, $i);
    }
}
/**
 * 生成26位唯一订单号
 * @param object $model  数据库类
 * @param string $user_id  前缀
 * @param string $order_key  默认字段key
 * @param array $where  条件
 * @param int $i  循环次数
 * @param int $len  订单号长度
 * @return string
 */
function orderSn($user_id = "0", $order_key = 'order',  $where = [], $i = 0, $len = 10)
{
    $order_sn = $user_id;
    if (strlen($user_id) < $len) {
        $len = (int)($len - strlen($user_id));
        for ($i = 1; $i <= $len; $i++) {
            $order_sn .= rand(0, 9);
        }
    }
    // $where = array_merge([[$order_key, '=', $order_sn]], $where);
    // $res =  $model->where($where)->exists();
    $res = Cache::get($order_sn, false);
    if ($res && $res == $order_key) {
        $i++;
        if ($i < 4) {
            return orderSn($user_id, $order_key, $where, $i, $len);
        } else {
            $order_sn  = time() + (rand(1000, 9999));
            Cache::put($order_sn, $order_key);
            return $order_sn;
        }
    }
    //return $prefix . $user_id . time() . substr(microtime(), 2, 6) . sprintf('%03d', rand(0, 999));//32位
    // return $user_id . time(); //18位
    return $order_sn;
}
/**
 * 随机单号
 */
function orderStrSn($user_id = 0, $len = 10)
{
    $order_sn = $user_id;
    if (strlen($user_id) < $len) {
        $len = (int)($len - strlen($user_id));
        for ($i = 1; $i <= $len; $i++) {
            $order_sn .= rand(0, 9);
        }
    }
    return $order_sn;
}
//生成指定的字符串长度
function generateUniqueString($length = 4)
{
    if ($length < 4) {
        $length = 4;
    }
    $characters = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
    $charLength = strlen($characters);
    $uniqueString = '';
    for ($i = 0; $i < $length; $i++) {
        if ($i == 0) {
            $uniqueString .= $characters[rand(10, 35)];
        } elseif ($i == 1) {
            $uniqueString .= $characters[rand(0, 9)];
        } elseif ($i == 2 || $i == 3) {
            $uniqueString .= $characters[rand(0, $charLength - 1)];
        } else {
            $uniqueString .= $characters[rand(10, $charLength - 1)];
        }
    }
    return $uniqueString;
}

//----------------------------------------------------------数据库迁移---------------------------------------------------

//----------------------------------------------------------redis相关----------------------------------------------------

/**
 * redis 消息入队
 */
function redisRpush($info, $key = 'default', $time = 60)
{

    $i = 1;
    while ($info['number'] >= $i) {
        $i++;
        Redis::rpush($key, $info['price']);
    }
    Redis::expire($key, $time);
}
function redisLpop($key)
{
    return  Redis::lpop($key);
}
function redisRpushUnit($redis_value, $key = 'default')
{
    return  Redis::rpush($key, $redis_value);
}
/**
 * redis 频率请求限制
 */
function redisFrequency(string $key = 'default',  $redis_value = "", int $time = 10)
{
    $get_value = Redis::get($key);
    if ($get_value) {
        return $get_value;
    } else {
        Redis::setex($key, $redis_value, $time);
        return false;
    }
}
/**
 * 获取队列长度
 */
function redisLlen(string $key = '')
{
    return Redis::llen($key);
}
//----------------------------------------------------------距离计算----------------------------------------------------
/** 获取用户最近的店铺
 * @param $shopList
 * @param $lon
 * @param $lat
 * @return array
 */
function nearestShop($shopList, $lon, $lat)
{
    $arr = [];
    foreach ($shopList as $key => $shop) {
        $arr[$key] = getDistance($lon, $lat, $shop['longitude'], $shop['latitude']);
    }
    asort($arr);    //按距离排序
    return $shopList[array_keys($arr)[0]];
}

/** 根据坐标计算距离
 * @param float $lon1
 * @param float $lat1
 * @param float $lon2
 * @param float $lat2
 * @param int $unit 单位 2是公里
 * @param int $decimal 四舍五入小数点后位数
 * @return float
 */
function getDistance($lon1, $lat1, $lon2, $lat2, $unit = 2, $decimal = 2)
{
    $EARTH_RADIUS = 6371; // 地球半径系数

    //将角度转为狐度
    $radLng1 = deg2rad($lon1);
    $radLat2 = deg2rad($lat2);
    $radLat1 = deg2rad($lat1);
    $radLng2 = deg2rad($lon2);

    $distance = 2 * asin(sqrt(pow(sin(($radLat1 - $radLat2) / 2), 2) + cos($radLat1) * cos($radLat2) * pow(sin(($radLng1 - $radLng2) / 2), 2))) * $EARTH_RADIUS * 1000;

    if ($unit === 2) {
        $distance /= 1000;
    }
    return round($distance, $decimal);
}
//----------------------------------------------------------数据库迁移---------------------------------------------------

/**
 * 设置数据表字段属性
 * @param  string $type 字段属性
 * @param string $comment 描述
 * @param string $default 默认值
 * @param string $leng 长度
 */
function setTableKey($type = 'string', $comment = '', $default = '', $leng = 120): array
{
    return array(
        'type' => $type,
        'comment' => $comment,
        'default' => $default,
        'leng' => $leng
    );
}

function setTableForm($table_name, $data, $up = false)
{
    if (count($data) > 0) {
        foreach ($data as $k => $v) {
            if ($up == true && Schema::hasColumn($table_name, $k)) {
                if ($v['type'] == 'string' || $v['type'] == 'char') {
                    Schema::table($table_name, function (Blueprint $table) use ($k, $v) {
                        $type = $v['type'];
                        $table->$type($k, $v['leng'])->default($v['default'])->change();
                    });
                } elseif ($v['type'] == 'text' || $v['type'] == 'longText'  || $v['type'] == 'json') {
                    Schema::table($table_name, function (Blueprint $table) use ($k, $v) {
                        $type = $v['type'];
                        $table->$type($k)->nullable()->change();
                    });
                } else {
                    Schema::table($table_name, function (Blueprint $table) use ($k, $v) {
                        $type = $v['type'];
                        $table->$type($k)->default($v['default'])->change();
                    });
                }
            }

            if (!Schema::hasColumn($table_name, $k)) {

                if ($v['type'] == 'string' || $v['type'] == 'char') {
                    Schema::table($table_name, function (Blueprint $table) use ($k, $v) {
                        $type = $v['type'];
                        $table->$type($k, $v['leng'])->default($v['default'])->comment($v['comment']);
                    });
                } elseif ($v['type'] == 'timestamp' || $v['type'] == 'text' || $v['type'] == 'longText' || $v['type'] == 'json') {
                    Schema::table($table_name, function (Blueprint $table) use ($k, $v) {
                        $type = $v['type'];
                        $table->$type($k)->nullable()->comment($v['comment']);
                    });
                } else {
                    Schema::table($table_name, function (Blueprint $table) use ($k, $v) {
                        $type = $v['type'];
                        $table->$type($k)->default($v['default'])->comment($v['comment']);
                    });
                }
            }
        }
    }
}
