<?php
namespace app\MyClass;

use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Cache;


class WxPay
{
    protected const AppID = '';
    protected const MchId = '';
    protected const AppKey = '';
    protected const AppSecret = '';
    /**
     * 设置证书
     */
    public function GetSSLCertPath(&$sslCertPath, &$sslKeyPath)
    {
        $sslCertPath = base_path('Certificate/Wx/Pay/sbnwhcm_cert.pem');
        $sslKeyPath = base_path('Certificate/Wx/Pay/sbnwhcm_key.pem');
    }
    /**
     * 微信支付配置
     * @param string $type
     * @return array
     */
    public static function wxPayConfig($type = 'ordinary')
    {
        switch ($type) {
            case 'serviceProvider':
                //服务商支付配置
                $data = array(
                    "app_key" => "", //支付密钥
                    "appid" => "", //服务商appid
                    "mch_id" => "", //服务商户号
                    "sub_appid" => "", //子商户appid可以不给
                    "sub_mch_id" => "", //子商户号
                    "notify_url" => "", //回调地址
                );
                break;
            case 'ordinary':
                //普通商户支付配置
                $data = array(
                    "appid" => self::AppID, //服务商appid
                    "mch_id" => self::MchId, //服务商户号
                    "app_key" => self::AppKey, //支付密钥
                );
                break;
            case 'refundServiceProvider':
                //服务商退款配置
                $data = array(
                    "appid" => "wx94c2a29c7e3d35bc", //服务商appid
                    "mch_id" => "1615057065", //微信支付分配的商户号
                    "sub_appid" => "", //微信分配的子商户公众账号ID(可以不填写)
                    "sub_mch_id" => "", //微信支付分配的子商户号
                );
                break;
            case 'refundOrdinary':
                //普通商户退款配置
                $data = array(
                    "appid" => self::AppID, //服务商appid
                    "mch_id" => self::MchId, //服务商户号
                    "app_key" => self::AppKey, //支付密钥
                );
                break;
            case 'onceFashionable':
                //微信单次分账
                $data = array(
                    "appid" => self::AppID, //服务商appid
                    "mch_id" => self::MchId, //服务商户号
                    "app_key" => self::AppKey, //支付密钥
                );
                break;
            case 'profitsharingAddreceiver':
                //添加分账接收方
                $data = array(
                    "appid" => self::AppID, //服务商appid
                    "mch_id" => self::MchId, //服务商户号
                    "app_key" => self::AppKey, //支付密钥
                );
                break;
            default:
                $data = false;
        }
        return $data;
    }
    /**
     * 回调地址验证
     */
    public function CallbackAddressValidation($data, $key = 'ordinary')
    {
        // debugMessage($data, '微信支付初始数据');
        //注意一定要清楚自己支付的方式 是使用的服务商还是普通商
        $cfg = self::wxPayConfig($key); //获取配置
        $data = self::fromXml($data); //解析返回结果
        //签名验证
        $sign = $data['sign'];
        $dataResult = $this->makeSign($data, $cfg['app_key']);
        //验证是否成功和签名是否正确
        if ($data['result_code'] == 'SUCCESS' && $data['return_code'] == 'SUCCESS' && ($dataResult == $sign)) {
            return $data;
        } else {
            return false;
        }
    }
    /**
     * 添加分账
     */
    public function profitsharingAddreceiver($order, $project_cfg)
    {
        $url = 'https://api.mch.weixin.qq.com/pay/profitsharingaddreceiver';
        $app_key = $project_cfg['app_key']; //支付密钥
        unset($project_cfg['app_key']);
        $order = array_merge($order, $project_cfg); //合并
        $order['nonce_str'] = self::getNonceStr(); //随机字符串
        $order['sign_type'] = 'HMAC-SHA256'; //随机字符串
        $order['sign'] = $this->makeSign($order, $app_key, 'HMAC-SHA256'); //生成签名
        $str_xml = self::toXml($order); //转换后的xml格式
        $rep_xml = self::postXmlCurl($str_xml, $url); //请求第三方
        $data = self::fromXml($rep_xml); //解析返回结果
        //验证签名
        if (!empty($data) && isset($data['return_code']) && isset($data['result_code']) && $data['return_code'] == "SUCCESS" && $data['result_code'] == 'SUCCESS') { //远端返回 成功或失败
            return true;
        } else {
            return false;
        }
    }
    /**
     * 微信单次分账
     * 
     */
    public function onceFashionable($order, $project_cfg)
    {
        $url = 'https://api.mch.weixin.qq.com/secapi/pay/profitsharing';
        $app_key = $project_cfg['app_key']; //支付密钥
        unset($project_cfg['app_key']);
        $order = array_merge($order, $project_cfg); //合并
        $order['nonce_str'] = self::getNonceStr(); //随机字符串
        $order['sign_type'] = "HMAC-SHA256"; //随机字符串
        $order['sign'] = $this->makeSign($order, $app_key, 'HMAC-SHA256'); //生成签名
        $str_xml = self::toXml($order); //转换后的xml格式
        $rep_xml = self::postXmlCurl($str_xml, $url, true); //请求第三方
        $data = self::fromXml($rep_xml); //解析返回结果
        if (!empty($data) && isset($data['return_code']) && isset($data['result_code']) && $data['return_code'] == "SUCCESS" && $data['result_code'] == 'SUCCESS') { //远端返回 成功或失败
            return $data;
        } else {
            return $data;
        }
    }
    public function profitsharingreturn($order, $project_cfg)
    {
        $url = 'https://api.mch.weixin.qq.com/secapi/pay/profitsharingreturn';
        $app_key = $project_cfg['app_key']; //支付密钥
        unset($project_cfg['app_key']);
        $order = array_merge($order, $project_cfg); //合并
        $order['nonce_str'] = self::getNonceStr(); //随机字符串
        $order['sign_type'] = "HMAC-SHA256"; //随机字符串
        $order['return_account'] = $order['mch_id'];
        $order['sign'] = $this->makeSign($order, $app_key, 'HMAC-SHA256'); //生成签名
        $str_xml = self::toXml($order); //转换后的xml格式
        $rep_xml = self::postXmlCurl($str_xml, $url, true); //请求第三方
        $data = self::fromXml($rep_xml); //解析返回结果
        if (!empty($data) && isset($data['return_code']) && isset($data['result_code']) && $data['return_code'] == "SUCCESS" && $data['result_code'] == 'SUCCESS') { //远端返回 成功或失败
            return $data;
        } else {
            return $data;
        }
    }
    public function profitsharinGorderAmount($order, $project_cfg)
    {
        $url = 'https://api.mch.weixin.qq.com/pay/profitsharingorderamountquery';
        $app_key = $project_cfg['app_key']; //支付密钥
        unset($project_cfg['app_key']);
        $order = array_merge($order, $project_cfg); //合并
        $order['nonce_str'] = self::getNonceStr(); //随机字符串
        $order['sign_type'] = "HMAC-SHA256"; //随机字符串
        $order['sign'] = $this->makeSign($order, $app_key, 'HMAC-SHA256'); //生成签名
        $str_xml = self::toXml($order); //转换后的xml格式
        $rep_xml = self::postXmlCurl($str_xml, $url, true); //请求第三方
        $data = self::fromXml($rep_xml); //解析返回结果
        if (!empty($data) && isset($data['return_code']) && isset($data['result_code']) && $data['return_code'] == "SUCCESS" && $data['result_code'] == 'SUCCESS') { //远端返回 成功或失败
            return $data;
        } else {
            return $data;
        }
    }


    /**
     *
     * 微信统一下单
     * 服务商版必须参数：
     *        body 商品描述
     *        appid 服务商appid
     *        mch_id 服务商户号
     *        sub_mch_id   子商户号
     *        out_trade_no  我方生成的订单号
     *        total_fee  支付金额
     *        notify_url  回调地址
     *        app_key 支付密钥
     * 普通商户版必须参数：
     *        body 商品描述
     *        appid 服务商appid
     *        mch_id 服务商户号
     *        out_trade_no  我方生成的订单号
     *        total_fee  支付金额
     *        notify_url  回调地址
     *        app_key 支付密钥
     * @param $order 订单信息
     * @param $project_cfg 配置信息
     * @return array|string
     */
    public function wxUnifiedPlaceAnOrder($order, $project_cfg, $trade_type = 'JSAPI')
    {
        $time = time();
        $app_key = $project_cfg['app_key']; //支付密钥
        unset($project_cfg['app_key']);
        $order = array_merge($order, $project_cfg); //合并
        $order['nonce_str'] = self::getNonceStr(); //随机字符串
        $order['trade_type'] = $trade_type; //支付类型
        $order['time_start'] = date('YmdHis', $time); //交易起始时间
        $order['spbill_create_ip'] = $_SERVER['REMOTE_ADDR']; //终端IP
        $order['sign'] = $this->makeSign($order, $app_key); //生成签名
        $req_xml = self::toXml($order); //转换后的xml格式
        $rep_xml = self::postXmlCurl($req_xml, 'https://api.mch.weixin.qq.com/pay/unifiedorder'); //请求第三方
        $data = self::fromXml($rep_xml); //解析返回结果
        //验证签名
        if (!empty($data) && isset($data['return_code']) && isset($data['result_code']) && $data['return_code'] == "SUCCESS" && $data['result_code'] == 'SUCCESS') { //远端返回 成功或失败
            if (isset($data['code_url'])) {
                $code_url = $data['code_url'];
            } else {
                $code_url = '';
            }
            $data = array(
                "appId" => $data['appid'], //公众号名称，由商户传入
                "timeStamp" => "$time", //时间戳，自1970年以来的秒数
                "nonceStr" => $data['nonce_str'], //随机串
                "package" => "prepay_id=" . $data['prepay_id'],
                "signType" => "MD5", //微信签名方式：
            );
            //再次加密
            $sign = $this->makeSign($data, $app_key); //生成签名
            $data['paySign'] = $sign;
            if (!empty($code_url)) {
                $data['code_url'] = $code_url;
            }
            return $data;
        } else {
            return false;
        }
    }

    public function getWxPayConfig($url)
    {
        $noncestr = self::getNonceStr(16); //随机字符串
        $jsapiTicket = $this->getTicket();
        $timestamp = time();
        $url_arr = explode('#', $url);
        $url = $url_arr[0];
        // 这里参数的顺序要按照 key 值 ASCII 码升序排序
        $string = "jsapi_ticket=$jsapiTicket&noncestr=$noncestr&timestamp=$timestamp&url=$url";
        $signature = sha1($string);
        $signPackage = array(
            "appId"     => self::AppID,
            "noncestr"  => $noncestr,
            "timestamp" => $timestamp,
            "url"       => $url,
            "signature" => $signature,
        );
        return $signPackage;
    }
    //微信公众号会用到
    public function getTicket()
    {
        $ticket = Cache::get('ticket', false);
        if (!empty($ticket)) {
            return $ticket;
        }
        $access_token = getAccessToken();
        $jsapi_ticket = json_decode(file_get_contents("https://api.weixin.qq.com/cgi-bin/ticket/getticket?access_token=$access_token&type=jsapi"), true);
        if ($jsapi_ticket['errcode'] == '0' && $jsapi_ticket['errmsg'] == 'ok') {
            Cache::put('ticket', $jsapi_ticket['ticket'], 7000);
            return $jsapi_ticket['ticket'];
        } else {
            Cache::put('ticket', false, 7000);
            error(errorCode()::get_ticket_no, __('api.get_ticket_no'));
        }
    }

    /**
     * 微信统一退款
     * 服务商版必须参数：

     *        appid 服务商appid
     *        mch_id 服务商户号
     *        sub_mch_id   子商户号
     *        out_trade_no  我方支付时创建的单号
     *        total_fee  支付金额
     *        out_refund_no 新生成的退款订单号
     *        total_fee     订单总额
     *        refund_fee    退款金额
     * 普通商户版必须参数：
     *        appid 服务商appid
     *        mch_id 服务商户号
     *        out_trade_no  我方支付时创建的单号
     *        out_refund_no 新生成的退款订单号
     *        total_fee     订单总额
     *        refund_fee    退款金额
     * @param $order 订单信息
     * @param $project_cfg 配置信息
     * @return bool
     */
    public function wxUnifiedRefund($order, $project_cfg): bool
    {
        try {
            $app_key = $project_cfg['app_key'];
            unset($project_cfg['app_key']);
            $order = array_merge($order, $project_cfg); //合并
            $order['nonce_str'] = self::getNonceStr(); //随机字符串
            $order['sign'] = $this->makeSign($order, $app_key); //生成签名
            $req_xml = self::toXml($order); //转换后的xml格式
            $rep_xml = self::postXmlCurl($req_xml, 'https://api.mch.weixin.qq.com/secapi/pay/refund', true); //请求第三方
            $data = self::fromXml($rep_xml); //解析返回结果
            if (!empty($data) && isset($data['return_code']) &&  isset($data['result_code']) && $data['return_code'] == "SUCCESS" && $data['result_code'] == 'SUCCESS') { //远端返回 成功或失败
                return true;
            } else {
                debugMessage([$rep_xml, $order]);
                return false;
            }
        } catch (\Exception $e) {
            return false;
        }
    }
    /**
     * 请求微信支付接口
     * @param $xml 订单信息和支付配置信息
     * @param $url 请求地址
     * @param bool $useCert
     * @param int $second
     * @return bool|string
     */
    private function postXmlCurl($xml, $url, $useCert = false, $second = 30)
    {
        $ch = curl_init();
        //设置超时
        curl_setopt($ch, CURLOPT_TIMEOUT, $second);
        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
        curl_setopt($ch, CURLOPT_SSL_VERIFYHOST, FALSE);
        //设置header
        curl_setopt($ch, CURLOPT_HEADER, FALSE);
        //要求结果为字符串且输出到屏幕上
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
        if ($useCert == true) {
            //设置证书
            //使用证书：cert 与 key 分别属于两个.pem文件
            curl_setopt($ch, CURLOPT_SSLCERTTYPE, 'PEM');
            curl_setopt($ch, CURLOPT_SSLKEYTYPE, 'PEM');
            //设置证书
            //使用证书：cert 与 key 分别属于两个.pem文件
            //证书文件请放入服务器的非web目录下
            $sslCertPath = "";
            $sslKeyPath = "";
            $this->GetSSLCertPath($sslCertPath, $sslKeyPath);
            curl_setopt($ch, CURLOPT_SSLCERTTYPE, 'PEM');
            curl_setopt($ch, CURLOPT_SSLCERT, $sslCertPath);
            curl_setopt($ch, CURLOPT_SSLKEYTYPE, 'PEM');
            curl_setopt($ch, CURLOPT_SSLKEY, $sslKeyPath);
        }
        //post提交方式
        curl_setopt($ch, CURLOPT_POST, TRUE);
        curl_setopt($ch, CURLOPT_POSTFIELDS, $xml);
        //运行curl
        $data = curl_exec($ch);
        //返回结果
        if ($data) {
            curl_close($ch);
            return $data;
        } else {
            $err =  curl_errno($ch);
            curl_close($ch);
            return $err;
        }
    }
    /**
     *
     * 产生随机字符串，不长于32位
     * @param int $length
     * @return mixed 产生的随机字符串
     */
    public static function getNonceStr($length = 32)
    {
        $chars = "abcdefghijklmnopqrstuvwxyz0123456789";
        $str = "";
        for ($i = 0; $i < $length; $i++) {
            $str .= substr($chars, mt_rand(0, strlen($chars) - 1), 1);
        }
        return $str;
    }


    public function makeSha1($order,  $type = 'sha1')
    {
        //签名步骤一：按字典序排序参数
        ksort($order);
        $string = $this->ToUrlParams($order);
        //签名步骤二：在string后加入KEY 
        if ($type == 'md5') {
            //签名步骤三：MD5加密
            $string = md5($string);
        } else {
            //签名步骤三：sha1加密
            $string = sha1($string);
        }
        //签名步骤四：所有字符转为大写
        $result = strtolower($string);
        return $result;
    }
    /**
     * 生成签名 MD5、HMAC-SHA256
     *
     * @param $order 订单信息和支付配置信息
     * @param $app_key 支付密钥
     * @param string $type 加密类型
     * @return string 签名，本函数不覆盖sign成员变量
     */
    public function makeSign($order, $app_key = '', $type = 'md5')
    {
        //签名步骤一：按字典序排序参数
        ksort($order);
        $string = $this->ToUrlParams($order);
        //签名步骤二：在string后加入KEY 
        if (!empty($app_key)) {
            $string = $string . "&key=" . $app_key;
        }
        if ($type == 'md5') {
            //签名步骤三：MD5加密
            $string = md5($string);
        } else {
            //签名步骤三：sha256加密
            $string = hash_hmac("sha256", $string, $app_key);
        }
        //签名步骤四：所有字符转为大写
        $result = strtoupper($string);
        return $result;
    }
    public function  ToUrlParams($values)
    {
        $buff = "";
        foreach ($values as $k => $v) {
            if ($k != "sign" && $v != "" && !is_array($v)) {
                $buff .= $k . "=" . $v . "&";
            }
        }

        $buff = trim($buff, "&");
        return $buff;
    }
    /**
     * @param $data 将订单信息转成xml格式发送
     * @return string
     */
    public static function toXml($data)
    {
        $xml = "<xml>";
        foreach ($data as $key => $val) {
            if (is_numeric($val)) {
                $xml .= "<" . $key . ">" . $val . "</" . $key . ">";
            } else {
                $xml .= "<" . $key . "><![CDATA[" . $val . "]]></" . $key . ">";
            }
        }
        $xml .= "</xml>";
        return $xml;
    }

    /**
     * @param $xml 将xml转成数组
     * @return mixed
     */
    public static function fromXml($xml)
    {
        if (empty($xml)) {
            return '';
        }
        if (strpos($xml, 'xml') !== false || strpos($xml, 'XML') !== false) {
            // 禁止引用外部xml实体
            libxml_disable_entity_loader(true);
            $data = json_decode(json_encode(simplexml_load_string($xml, 'SimpleXMLElement', LIBXML_NOCDATA), 320), true);
            return $data;
        } else {
            return '';
        }
    }
}
