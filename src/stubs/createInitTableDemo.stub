<?php

namespace App\Console\Commands;

use App\MyClass\CreateDatabase;
use Illuminate\Console\Command;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Artisan;
use Illuminate\Support\Facades\File;

class InitTable extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'insert {pwd?} {is?}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Insert';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        $is = $this->argument('is');
        $pwd = $this->argument('pwd');
        if (md5($pwd) == config('app.my_key')) {
            if ($is == 'drq') {
                $is = $this->ask('确认初始化数据库？(yes/no)');
                if ($is == 'yes' || $is == 'Yes') {
                    $database = $this->ask('请输入数据库名称：database (默认' . config('database.connections.mysql.database') . ')');
                    $username = $this->ask('请输入用户名：username (默认' . config('database.connections.mysql.username') . ')');
                    $password = $this->ask('请输入密码：password (默认' . config('database.connections.mysql.password') . ')');
                    if (!empty($database)) {
                        $this->info('数据库：' . $database);
                    }
                    if (!empty($username)) {
                        $this->info('用户名：' . $username);
                    }
                    if (!empty($password)) {
                        $this->info('登陆密码：' . $password);
                    }
                    $this->allTable($database, $username, $password);
                } else {
                }
            } else {
                $this->addTable();
            }
        } else {
            $this->error(__('api.key_no'));
        }
    }
    public function addTable()
    {
        $artisan = base_path('artisan');
        $this->info('数据库迁移中.........');
        DB::table('migrations')->delete();
        exec("php {$artisan} migrate --force >> insert.log 2>&1 &");
        // exec("php {$artisan} db:seed --class=DatabaseSeeder --force >> insert.log 2>&1 &");
        $this->info('成功.........');
    }
    public function allTable($database = 'test', $username = 'root', $db_pwd = 'root')
    {
        $this->info('执行删库初始化中............');
        $this->info('文件重新加载中............');
        exec('composer dump-autoload'); //重新加载文件
        $this->info('文件重新加载成功^_^');
        $this->info('秘钥初始化....');
        Artisan::call('key:generate'); //初始化秘钥
        $this->info('秘钥初始化成功');
        if (empty($database)) {
            $database = config('database.connections.mysql.database');
            $this->error('数据库：' . $database);
        }
        if (empty($username)) {
            $username = config('database.connections.mysql.username');
            $this->error('登陆账户：' . $username);
        }
        if (empty($db_pwd)) {
            $db_pwd = config('database.connections.mysql.password');
            $this->error('登陆密码：' . $db_pwd);
        }
        $this->createAppKey($database, $username, $db_pwd); //初始化key
        Artisan::call('cache:clear'); //清空应用缓存
        Artisan::call('config:clear'); //移除配置缓存文件
        Artisan::call('route:clear'); //移除路由缓存文件
        Artisan::call('view:cache'); //清除视图缓存

        $this->info('清除缓存成功^_^');
        Artisan::call('config:cache'); //合并所有的配置信息为一个，提高加载速度
        Artisan::call('route:cache'); //生成路由缓存文件来提升路由效率

        $config   = config('database.connections.' . config('database.default'));
        $prefix = config('database.connections.mysql.prefix');
        if (!function_exists('mysqli_connect')) {
            $this->info('初始化失败 婆娘不再!..');
        }
        try {
            $conn = mysqli_connect($config['host'], $config['username'], $config['password'], '', $config['port']);
            $table = $config['database'];
            $this->info('数据库创建中.........');
            mysqli_query($conn, "drop database `{$table}`");
            mysqli_query($conn, "CREATE DATABASE `{$table}` CHARSET=utf8mb4 COLLATE=utf8mb4_bin");
            $this->info('创建数据库成功^_^');
            $artisan = base_path('artisan');
            $this->info('数据库迁移中.........');
            exec("php {$artisan} migrate --force >> insert.log 2>&1 &");
            sleep(5);
            // exec("php {$artisan} db:seed --class=DatabaseSeeder --force >> insert.log 2>&1 &");
            $CreateDatabaseModel =  new CreateDatabase();
            $CreateDatabaseModel->createInitServe();
            $this->info('数据库迁移成功^_^');
            $this->info('已经初始化了! 要是你误操作 没备份旧数据库 那就准备跑路吧兄弟! ^_^');
        } catch (\Exception  $e) {
            $this->info('初始化异常 可以向春哥贿赂点质询费就可以了!..' . $e->getMessage());
        }
    }
    public function createAppKey($database = 'luru', $username = 'root', $db_pwd = 'root')
    {
        $pwd = $this->argument('pwd');
        try {
            $pwd =  encrypt($pwd);
            $data = array(
                'APP_REQUEST' => $pwd,
                'DB_DATABASE' => $database,
                'DB_USERNAME' => $username,
                'DB_PASSWORD' => $db_pwd
            );
        } catch (\Exception $e) {
            $this->error(__('api.key_no'));
            die;
        }
        $envPath = base_path('.env');
        $contentArray = collect(file($envPath, FILE_IGNORE_NEW_LINES));
        $contentArray->transform(function ($item) use ($data) {
            foreach ($data as $key => $value) {
                $arr =   explode('=', $item);
                $str = str_replace(' ', '', $arr[0]);
                if ($str == $key) {
                    return $key . '=' . $value;
                }
            }
            return $item;
        });
        $content = implode(PHP_EOL, $contentArray->toArray());
        File::put($envPath, $content);
    }
}
