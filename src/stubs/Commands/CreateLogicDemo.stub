<?php

namespace App\Console\Commands;

use Illuminate\Console\Command;
use Illuminate\Support\Facades\Artisan;

class CreateLogic extends Command
{
    /**
     * The name and signature of the console command.
     *
     * @var string
     */
    protected $signature = 'create:logic {class_name} {controller_name} {v} {describe} {model?}';

    /**
     * The console command description.
     *
     * @var string
     */
    protected $description = 'Create logic';

    /**
     * Create a new command instance.
     *
     * @return void
     */
    public function __construct()
    {
        parent::__construct();
    }

    /**
     * Execute the console command.
     *
     * @return int
     */
    public function handle()
    {
        //获取参数
        $args = $this->arguments();
        //控制器模块名称 Admin Api
        $controller_name = $args['controller_name'];
        //控制器类名称
        $class_name = $args['class_name'];
        //是否创建模型层
        $model  = $args['model'];
        //版本
        $v = $args['v'] ?? 'v1';
        //描述
        $describe = $args['describe'];
        //创建模型层
        if ($model) {
            $this->createModel($class_name, $describe);
        }
        //创建逻辑层
        $this->createServices($controller_name, $class_name, $describe, $v);
        //创建表单验证层
        $this->createRequest($controller_name, $class_name, $describe, $v);
        //创建路由层
        $this->createRoutesTo($controller_name, $class_name, $describe, $v);
        $this->info('一键创建逻辑成功 春哥牛逼' . logMyImg());
    }
    /**
     * 创建模型层
     */
    public function createModel($class_name, $describe = '')
    {
        //模型层文件地址
        Artisan::call("make:model {$class_name} -fm"); //清除视图缓存
    }
    /**
     * 控制层创建
     */
    public function createController($controller_name, $class_name, $describe, $v = 'v1')
    {
        //文件地址
        $logic_file = app_path() . '/Http/Controllers' . "/{$controller_name}" . "/$v/" . $class_name . 'Controller.php';
        $logic_path = dirname($logic_file); //返回路径中的目录部分
        //获取模板,替换变量
        $controller = file_get_contents(base_path('/stubs/my_controller.stub'));
        $controller_default = file_get_contents(base_path('/stubs/my_default_controller.stub'));
        $source = str_replace('{{v}}', $v, $controller);
        $source = str_replace('{{controller_name}}', $controller_name, $source);
        $source = str_replace('{{controller_default}}', $controller_default, $source);
        $source = str_replace('{{class_name}}', $class_name, $source);
        $source = str_replace('{{describe}}', $describe, $source);
        $this->createFileSend($logic_file, $logic_path, $source, '控制层');
    }
    /**
     * 创建逻辑层
     */
    public function createServices($controller_name, $class_name, $describe = '', $v = 'v1')
    {
        //逻辑层文件地址
        $services_file = app_path() . '/Services' . "/{$controller_name}/$v/" . $class_name . 'Service.php';
        //命名空间
        $services_path = dirname($services_file); //返回路径中的目录部分
        //获取模板,替换变量
        $services = file_get_contents(base_path('/stubs/my_services.stub'));
        $services_default = file_get_contents(base_path('/stubs/my_default_services.stub'));
        $source = str_replace('{{v}}', $v, $services);
        $source = str_replace('{{namespace}}', $controller_name, $source);
        $source = str_replace('{{describe}}', $describe, $source);
        $source = str_replace('{{class_name}}', $class_name, $source);
        $source = str_replace('{{services_default}}', $services_default, $source);
        $source = str_replace('{{model_name}}', $class_name, $source);
        $this->createFileSend($services_file, $services_path, $source, '逻辑层');
    }
    /**
     * 创建表单验证
     */
    public function createRequest($controller_name, $class_name, $describe = '', $v = 'v1')
    {
        //逻辑层文件地址
        $logic_file = app_path() . '/Http/Requests' . "/{$controller_name}/$v/Up" . $class_name . 'Request.php';

        //命名空间
        $logic_path = dirname($logic_file); //返回路径中的目录部分
        //获取模板,替换变量
        $request = file_get_contents(base_path('/stubs/my_request.stub'));
        $source = str_replace('{{controller_name}}', $controller_name, $request);
        $source = str_replace('{{v}}', $v, $source);
        $source = str_replace('{{class_name}}', $class_name, $source);
        $source = str_replace('{{describe}}', $describe, $source);
        $this->createFileSend($logic_file, $logic_path, $source, '表单验证层');
    }
    /**
     * 新版创建路由
     */
    public function createRoutesTo($controller_name, $class_name, $describe, $v)
    {

        //路由层文件地址
        $controller =  str_replace('_', '/', toUnderScore($class_name));
        //文件地址
        $routes_template_path = base_path('routes\\' . strtolower($controller_name) . '.php');
        if (!file_exists($routes_template_path)) {
            $routes_default_template =  file_get_contents(base_path('/stubs/routes_default_template.stub')); //获取路由默认模板
            $ower_controller_name =  strtolower($controller_name);

            $routes_default_template = str_replace('{{controller_name}}', $controller_name, $routes_default_template);
            $routes_default_template = str_replace('{{ower_controller_name}}', $ower_controller_name, $routes_default_template);
            if (!file_put_contents($routes_template_path, $routes_default_template)) {
                $this->error("路由创建失败！");
                exit;
            }
            $routes_template = $routes_default_template;
        } else {
            $routes_template = file_get_contents($routes_template_path); //获取路由文件
        }


        $default_method = file_get_contents(base_path('/stubs/my_routes.stub'));
        $source = str_replace('//addController', $default_method, $routes_template);
        $source = str_replace('{{controller}}', $controller, $source);
        $source = str_replace('{{describe}}', $describe, $source);

        $controller_name_str  = str_replace('/', '.', $controller);
        $source = str_replace('{{controller_name_str}}', $class_name, $source);
        $source = str_replace('{{controller_name}}', strtolower($controller_name), $source);
        //写入
        if (!file_put_contents($routes_template_path, $source)) {
            $this->error('路由层追加失败！');
            exit;
        }
        $this->createRoutesDescription($controller_name, $class_name, $describe, $v);
        $this->info('文件重新加载中............');
        exec('composer dump-autoload'); //重新加载文件
        $this->info('文件重新加载成功............');
        Artisan::call('cache:clear'); //清除应用缓存
        Artisan::call('route:cache'); //清除路由缓存
        Artisan::call('config:cache'); //清除配置缓存
        Artisan::call('view:cache'); //清除视图缓存
        $this->info('缓存已清除');
    }

    /** 创建路由描述 */
    public function createRoutesDescription($controller_name, $class_name, $describe, $verison)
    {
        $controller_name =  strtolower($controller_name);
        $lang = ['en', 'zh'];
        foreach ($lang as $v) {
            // 定义文件路径
            $file = resource_path("lang/$v/route_description.php");
            // 获取当前文件的内容，如果文件不存在则返回一个空数组
            $currentData = file_exists($file) ? require $file : [];
            $newData =  [
                $controller_name . '.' . $class_name . 'Service' . "{$class_name}Index" => $describe . '-列表',
                $controller_name . '.' . $class_name . 'Service' . "{$class_name}Create" => $describe . '-创建',
                $controller_name . '.' . $class_name . 'Service' . "{$class_name}Show" => $describe . '-详情',
                $controller_name . '.' . $class_name . 'Service' . "{$class_name}Destroy" => $describe . '-删除',
            ];
            if (isset($currentData[$controller_name . '.' . $verison])) {
                $currentData[$controller_name . '.' . $verison] = array_merge($currentData[$controller_name . '.' . $verison], $newData);
            } else {
                $currentData[$controller_name . '.' . $verison] = $newData;
            }

            // 如果文件所在的目录不存在，我们需要创建它
            if (!is_dir(dirname($file))) {
                mkdir(dirname($file), 0755, true);
            }
            // 将合并后的数组写回到文件中
            $exportedData = '<?php return ' . var_export($currentData, true) . ';';
            file_put_contents($file, $exportedData);
            $this->info('路由描述追加成功');
        }
    }
    /**
     * 执行文件创建
     */
    public function createFileSend($logic_file, $logic_path, $source, $message = '')
    {
        //是否已存在相同文件
        if (file_exists($logic_file)) {
            $this->error("{$message}文件已存在");
            exit;
        }
        //创建
        if (file_exists($logic_path) === false) {
            if (mkdir($logic_path, 0777, true) === false) {
                $this->error("{$message}目录" . $logic_path . '没有写入权限');
                exit;
            }
        }
        //写入
        if (!file_put_contents($logic_file, $source)) {
            $this->error("{$message}创建失败！");
            exit;
        }
        $this->info("{$message}创建成功！");
    }
}
