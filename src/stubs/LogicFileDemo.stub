<?php

namespace App\Logic;

use Illuminate\Support\Facades\DB;
use Maatwebsite\Excel\Facades\Excel;
use App\Imports\PhoneImport;
use App\MyClass\PemPhone;
use App\Models;
use App\MyClass\PaiPaiPhone;
use App\MyClass\MyRandomLink;
use App\MyClass\YqgPhone;

class LogicFile
{

  //-------------------------------------------------公用-------------------------------------------------
  //公用预处理
  public function baseFile($filePath, $ks, $item = 0, $funName = '', $moren = [], $ids = 0, $content = '',$str_len=4,$sort_url='')
  {
    if (empty($funName)) {
      return '文件地址不能为空';
    }

    try {
      ini_set('memory_limit', '-1');
      $res =  Excel::toArray(new PhoneImport, $filePath);

      $data = self::baseFormatting($res, $ks, $item, $moren);
      $data['ids'] = $ids;
      if (!empty($content)) {
        $data['content'] = $content;
        $data['str_len'] =$str_len;
        $data['sort_url'] =$sort_url;
      }
      if (count($data) > 0) {
        $message = $this->$funName($data);
        return $message;
      } else {
        return '没有数据';
      }
    } catch (\Exception $e) {
      return  '处理异常：' . $e->getMessage();
    }
  }

  public function RandomLinkDataImport($data)
  {
    $model = new MyRandomLink();
    $run  = $model->run($data);
    return trans('api.UploadedSuccessfully') . ' ' . $run['import_success_total'] . ' ' .
      trans('api.UploadFailed') . ' ' . $run['import_error_total'];
  }

  public function PaiPaiPhoneDataImport($data)
  {

    $import_error_total = 0; //导入失败总数
    $import_success_total = 0; //导入成功总数
    $time = dayDateTime();
    $model =  new Models\PaipaiDai();
    $ImportPaiPaiDaiLogModel = new Models\ImportPaiPaiDaiLog();
    $ids = $data['ids'];
    $code = $ImportPaiPaiDaiLogModel->where('id', $ids)->value('code');
    if ($code < 1 || $code == null) {
      return trans('api.UploadedSuccessfully') . ' ' . $import_success_total . ' ' .
        trans('api.UploadFailed') . ' ' . $import_error_total;
    }
    $phone_arr = [];
    unset($data['ids']);
    $pem_phone = new PaiPaiPhone();

    foreach ($data as $t => $r) {
      if (!empty($r['phone'])) {

        $phone = strtolower(md5($r['phone']));
        $is = $model->insert(['phone' => $r['phone'], 'state' => '不可营销', 'md5_phone' => $phone, 'code' => $code, 'created_at' => $time]);
        if ($is) {
          $import_error_total++;
          $phone_arr[] = $phone;
          if (count($phone_arr) == 100) {
            $res =  $pem_phone->sendHttp($phone_arr);
            if (isset($res['code']) && $res['code'] == 200) {
              $model->where('code', $code)->whereIn('md5_phone', $phone_arr)->update(['batch' => $res['data']['batch']]);
            }
            $phone_arr = [];
          }
        }
      }
    }

    if (count($phone_arr) > 0) {
      $res =  $pem_phone->sendHttp($phone_arr);
      if (isset($res['code']) && $res['code'] == 200) {
        $model->where('code', $code)->whereIn('md5_phone', $phone_arr)->update(['batch' => $res['data']['batch']]);
      }
    }
    $ImportPaiPaiDaiLogModel->where('code', $code)->update(['roback_state' => 1, 'updated_at' => dayDateTime()]);
    return trans('api.UploadedSuccessfully') . ' ' . $import_success_total . ' ' .
      trans('api.UploadFailed') . ' ' . $import_error_total;
  }
  public function YqgPhoneDataImport($data)
  {
    $import_error_total = 0; //导入失败总数
    $import_success_total = 0; //导入成功总数
    $time = dayDateTime();
    $model =  new Models\YqgPhone();
    $ImportYqgLogsModel = new Models\ImportYqgLogs();
    $ids = $data['ids'];
    $code = $ImportYqgLogsModel->where('id', $ids)->value('code');
    if ($code < 1 || $code == null) {
      return trans('api.UploadedSuccessfully') . ' ' . $import_success_total . ' ' .
        trans('api.UploadFailed') . ' ' . $import_error_total;
    }
    $phone_arr = [];
    unset($data['ids']);
    $pem_phone = new YqgPhone();
    foreach ($data as $t => $r) {
      if (!empty($r['phone'])) {

        $phone = md5($r['phone']);
        $is = $model->insert(['phone' => $r['phone'], 'state' => '不可营销', 'md5_phone' => $phone, 'code' => $code, 'created_at' => $time]);
        if ($is) {
          $import_error_total++;
          $phone_arr[] = $phone;
          if (count($phone_arr) == 100) {
            $res =  $pem_phone->sendHttp($phone_arr);
            if (isset($res['code']) && $res['code'] == 200) {
              $model->where('code', $code)->whereIn('md5_phone', $phone_arr)->update(['batch' => $res['data']['batch']]);
            }
            $phone_arr = [];
          }
        }
      }
    }
    if (count($phone_arr) > 0) {
      $res =  $pem_phone->sendHttp($phone_arr);
      if (isset($res['code']) && $res['code'] == 200) {
        $model->where('code', $code)->whereIn('md5_phone', $phone_arr)->update(['batch' => $res['data']['batch']]);
      }
    }
    $ImportYqgLogsModel->where('code', $code)->update(['roback_state' => 1, 'updated_at' => dayDateTime()]);
    return trans('api.UploadedSuccessfully') . ' ' . $import_success_total . ' ' .
      trans('api.UploadFailed') . ' ' . $import_error_total;
  }
  public  function phoneDataImport($data)
  {
    $import_error_total = 0; //导入失败总数
    $import_success_total = 0; //导入成功总数
    $time = dayDateTime();
    $model =  new Models\UserInfo();
    $ImportPhoneLogModel = new Models\ImportPhoneLog();
    $ids = $data['ids'];
    $code = $ImportPhoneLogModel->where('id', $ids)->value('code');
    if ($code < 1 || $code == null) {
      return trans('api.UploadedSuccessfully') . ' ' . $import_success_total . ' ' .
        trans('api.UploadFailed') . ' ' . $import_error_total;
    }
    $phone_arr = [];
    unset($data['ids']);
    $pem_phone = new PemPhone();
    foreach ($data as $t => $r) {
      if (!empty($r['phone'])) {
        $phone = md5($r['phone']);
        $is = $model->insert(['phone' => $r['phone'], 'state' => '不可营销', 'md5_phone' => $phone, 'code' => $code, 'created_at' => $time]);
        if ($is) {
          $phone_arr[] = $phone;
          if (count($phone_arr) == 100) {
            $data = json_encode([
              'nameListType' => '01',
              'nameList' => $phone_arr
            ]);
            $data = $pem_phone->sendHttp($data);
            if (isset($data['nonExistNameList'])) {
              $nonExistNameListTotal = count($data['nonExistNameList']);
              if ($nonExistNameListTotal > 0) {
                $model->where('code', $code)->whereIn('md5_phone', $data['nonExistNameList'])->update(['state' => '可营销', 'updated_at' => dayDateTime()]);
              }
            }
            $phone_arr = [];
          }
        }
      }
    }
    if (count($phone_arr) > 0) {
      $data = json_encode([
        'nameListType' => '01',
        'nameList' => $phone_arr
      ]);
      $data = $pem_phone->sendHttp($data);
      if (isset($data['nonExistNameList'])) {
        $nonExistNameListTotal = count($data['nonExistNameList']);
        if ($nonExistNameListTotal > 0) {
          $model->where('code', $code)->whereIn('md5_phone', $data['nonExistNameList'])->update(['state' => '可营销', 'updated_at' => dayDateTime()]);
        }
      }
    }
    $import_success_total = $model->where('code', $code)->where('state', '可营销')->count();
    $import_error_total = $model->where('code', $code)->where('state', '不可营销')->count();
    $res = [
      'success_total' => $import_success_total,
      'error_total' => $import_error_total,
      'state' => 1,
      'updated_at' => dayDateTime()
    ];
    $ImportPhoneLogModel->where('id', $ids)->update($res);
    return trans('api.UploadedSuccessfully') . ' ' . $import_success_total . ' ' .
      trans('api.UploadFailed') . ' ' . $import_error_total;
  }
  /**
   * 公用文件导入格式化
   */
  public static function baseFormatting($res_data, $ks, $getlen = 0, $moren = array(), $assign = array())
  {
    $info_data_res = array();
    //将字符串转成数组
    if (!isset($res_data[0]) || count($res_data[0][0]) < 1 || count($ks) < 1) {
      return false;
    }
    foreach ($res_data[0] as $ki => $data) {

      if ($ki >= $getlen) {
        if (count($data) > 0) {
          $value = array();
          foreach ($ks as $k => $v) {
            if (isset($moren[$v]) && empty($data[$k])) {
              $data[$k] = $moren[$v];
            }
            if (count($assign) > 0) {
              if (in_array($k, $assign)) {
                $value[$v] = $data[$k];
              }
            } else {
              if (!empty($data[$k])) {
                $value[$v] = str_replace(' ', '', $data[$k]);
              } else {
                $value[$v] = $data[$k];
              }
            }
          }
          $info_data_res[] = $value;
        } else {
          break;
        }
      }
    }

    return $info_data_res;
  }
}
